"use strict";var t=require("obsidian");function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=e(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function r(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}u((r=r.apply(t,e||[])).next())}))}function i(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function a(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;n(t[a],e)<0?r=a+1:i=a}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>i(t(e),n)}(t)),{left:r,center:function(t,n,i,a){null==i&&(i=0),null==a&&(a=t.length);const o=r(t,n,i,a-1);return o>i&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;n(t[a],e)>0?i=a:r=a+1}return r}}}const o=a(i).right;function s(t){if(t.__esModule)return t;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(t).forEach((function(n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})})),e}a((function(t){return null===t?NaN:+t})).center;var u=Math.sqrt(50),l=Math.sqrt(10),c=Math.sqrt(2);function f(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=u?10:a>=l?5:a>=c?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=u?10:a>=l?5:a>=c?2:1)}function h(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=u?i*=10:a>=l?i*=5:a>=c&&(i*=2),e<t?-i:i}function d(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function g(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function p(t,e,n=0,r=t.length-1,a=i){for(;r>n;){if(r-n>600){const i=r-n+1,o=e-n+1,s=Math.log(i),u=.5*Math.exp(2*s/3),l=.5*Math.sqrt(s*u*(i-u)/i)*(o-i/2<0?-1:1);p(t,e,Math.max(n,Math.floor(e-o*u/i+l)),Math.min(r,Math.floor(e+(i-o)*u/i+l)),a)}const i=t[e];let o=n,s=r;for(v(t,n,e),a(t[r],i)>0&&v(t,n,r);o<s;){for(v(t,o,s),++o,--s;a(t[o],i)<0;)++o;for(;a(t[s],i)>0;)--s}0===a(t[n],i)?v(t,n,s):(++s,v(t,s,r)),s<=e&&(n=s+1),e<=s&&(r=s-1)}return t}function v(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function m(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return g(t);if(e>=1)return d(t);var r,i=(r-1)*e,a=Math.floor(i),o=d(p(t,a).subarray(0,a+1));return o+(g(t.subarray(a+1))-o)*(i-a)}}function y(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let i of t)(i=+e(i,++r,t))&&(n+=i)}return n}var w=Array.prototype.slice;function b(t){return t}function x(t){return"translate("+t+",0)"}function k(t){return"translate(0,"+t+")"}function _(t){return e=>+t(e)}function M(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function S(){return!this.__axis}function A(t,e){var n=[],r=null,i=null,a=6,o=6,s=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,l=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",f=1===t||3===t?x:k;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==i?e.tickFormat?e.tickFormat.apply(e,n):b:i,p=Math.max(a,0)+s,v=e.range(),m=+v[0]+u,y=+v[v.length-1]+u,w=(e.bandwidth?M:_)(e.copy(),u),x=h.selection?h.selection():h,k=x.selectAll(".domain").data([null]),A=x.selectAll(".tick").data(d,e).order(),N=A.exit(),I=A.enter().append("g").attr("class","tick"),C=A.select("line"),T=A.select("text");k=k.merge(k.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),A=A.merge(I),C=C.merge(I.append("line").attr("stroke","currentColor").attr(c+"2",l*a)),T=T.merge(I.append("text").attr("fill","currentColor").attr(c,l*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==x&&(k=k.transition(h),A=A.transition(h),C=C.transition(h),T=T.transition(h),N=N.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=w(t))?f(t+u):this.getAttribute("transform")})),I.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return f((e&&isFinite(e=e(t))?e:w(t))+u)}))),N.remove(),k.attr("d",4===t||2===t?o?"M"+l*o+","+m+"H"+u+"V"+y+"H"+l*o:"M"+u+","+m+"V"+y:o?"M"+m+","+l*o+"V"+u+"H"+y+"V"+l*o:"M"+m+","+u+"H"+y),A.attr("opacity",1).attr("transform",(function(t){return f(w(t)+u)})),C.attr(c+"2",l*a),T.attr(c,l*p).text(g),x.filter(S).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),x.each((function(){this.__axis=w}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=w.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:w.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:w.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(a=o=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h.offset=function(t){return arguments.length?(u=+t,h):u},h}var N={value:()=>{}};function I(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new C(r)}function C(t){this._=t}function T(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function O(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function D(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=N,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}C.prototype=I.prototype={constructor:C,on:function(t,e){var n,r=this._,i=T(t+"",r),a=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<o;)if(n=(t=i[a]).type)r[n]=D(r[n],t.name,e);else if(null==e)for(n in r)r[n]=D(r[n],t.name,null);return this}for(;++a<o;)if((n=(t=i[a]).type)&&(n=O(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new C(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var E="http://www.w3.org/1999/xhtml",L={svg:"http://www.w3.org/2000/svg",xhtml:E,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function F(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),L.hasOwnProperty(e)?{space:L[e],local:t}:t}function P(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===E&&e.documentElement.namespaceURI===E?e.createElement(t):e.createElementNS(n,t)}}function B(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function R(t){var e=F(t);return(e.local?B:P)(e)}function j(){}function Y(t){return null==t?j:function(){return this.querySelector(t)}}function U(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function V(){return[]}function W(t){return null==t?V:function(){return this.querySelectorAll(t)}}function q(t){return function(){return this.matches(t)}}function $(t){return function(e){return e.matches(t)}}var H=Array.prototype.find;function z(){return this.firstElementChild}var J=Array.prototype.filter;function X(){return this.children}function G(t){return new Array(t.length)}function K(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function Z(t){return function(){return t}}function Q(t,e,n,r,i,a){for(var o,s=0,u=e.length,l=a.length;s<l;++s)(o=e[s])?(o.__data__=a[s],r[s]=o):n[s]=new K(t,a[s]);for(;s<u;++s)(o=e[s])&&(i[s]=o)}function tt(t,e,n,r,i,a,o){var s,u,l,c=new Map,f=e.length,h=a.length,d=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(d[s]=l=o.call(u,u.__data__,s,e)+"",c.has(l)?i[s]=u:c.set(l,u));for(s=0;s<h;++s)l=o.call(t,a[s],s,a)+"",(u=c.get(l))?(r[s]=u,u.__data__=a[s],c.delete(l)):n[s]=new K(t,a[s]);for(s=0;s<f;++s)(u=e[s])&&c.get(d[s])===u&&(i[s]=u)}function et(t){return t.__data__}function nt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function rt(t){return function(){this.removeAttribute(t)}}function it(t){return function(){this.removeAttributeNS(t.space,t.local)}}function at(t,e){return function(){this.setAttribute(t,e)}}function ot(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function st(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function ut(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function lt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ct(t){return function(){this.style.removeProperty(t)}}function ft(t,e,n){return function(){this.style.setProperty(t,e,n)}}function ht(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function dt(t,e){return t.style.getPropertyValue(e)||lt(t).getComputedStyle(t,null).getPropertyValue(e)}function gt(t){return function(){delete this[t]}}function pt(t,e){return function(){this[t]=e}}function vt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function mt(t){return t.trim().split(/^|\s+/)}function yt(t){return t.classList||new wt(t)}function wt(t){this._node=t,this._names=mt(t.getAttribute("class")||"")}function bt(t,e){for(var n=yt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function xt(t,e){for(var n=yt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function kt(t){return function(){bt(this,t)}}function _t(t){return function(){xt(this,t)}}function Mt(t,e){return function(){(e.apply(this,arguments)?bt:xt)(this,t)}}function St(){this.textContent=""}function At(t){return function(){this.textContent=t}}function Nt(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function It(){this.innerHTML=""}function Ct(t){return function(){this.innerHTML=t}}function Tt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Ot(){this.nextSibling&&this.parentNode.appendChild(this)}function Dt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Et(){return null}function Lt(){var t=this.parentNode;t&&t.removeChild(this)}function Ft(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Pt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Bt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Rt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function jt(t,e,n){return function(){var r,i=this.__on,a=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var o=0,s=i.length;o<s;++o)if((r=i[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=a,r.options=n),void(r.value=e);this.addEventListener(t.type,a,n),r={type:t.type,name:t.name,value:e,listener:a,options:n},i?i.push(r):this.__on=[r]}}function Yt(t,e,n){var r=lt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Ut(t,e){return function(){return Yt(this,t,e)}}function Vt(t,e){return function(){return Yt(this,t,e.apply(this,arguments))}}K.prototype={constructor:K,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},wt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Wt=[null];function qt(t,e){this._groups=t,this._parents=e}function $t(){return new qt([[document.documentElement]],Wt)}function Ht(t){return"string"==typeof t?new qt([[document.querySelector(t)]],[document.documentElement]):new qt([[t]],Wt)}function zt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Jt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Xt(){}qt.prototype=$t.prototype={constructor:qt,select:function(t){"function"!=typeof t&&(t=Y(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(a=s[c])&&(o=t.call(a,a.__data__,c,s))&&("__data__"in a&&(o.__data__=a.__data__),l[c]=o);return new qt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:U(e)}}(t):W(t);for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var o,s=e[a],u=s.length,l=0;l<u;++l)(o=s[l])&&(r.push(t.call(o,o.__data__,l,s)),i.push(o));return new qt(r,i)},selectChild:function(t){return this.select(null==t?z:function(t){return function(){return H.call(this.children,t)}}("function"==typeof t?t:$(t)))},selectChildren:function(t){return this.selectAll(null==t?X:function(t){return function(){return J.call(this.children,t)}}("function"==typeof t?t:$(t)))},filter:function(t){"function"!=typeof t&&(t=q(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],s=o.length,u=r[i]=[],l=0;l<s;++l)(a=o[l])&&t.call(a,a.__data__,l,o)&&u.push(a);return new qt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,et);var n=e?tt:Q,r=this._parents,i=this._groups;"function"!=typeof t&&(t=Z(t));for(var a=i.length,o=new Array(a),s=new Array(a),u=new Array(a),l=0;l<a;++l){var c=r[l],f=i[l],h=f.length,d=U(t.call(c,c&&c.__data__,l,r)),g=d.length,p=s[l]=new Array(g),v=o[l]=new Array(g),m=u[l]=new Array(h);n(c,f,p,v,m,d,e);for(var y,w,b=0,x=0;b<g;++b)if(y=p[b]){for(b>=x&&(x=b+1);!(w=v[x])&&++x<g;);y._next=w||null}}return(o=new qt(o,r))._enter=s,o._exit=u,o},enter:function(){return new qt(this._enter||this._groups.map(G),this._parents)},exit:function(){return new qt(this._exit||this._groups.map(G),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?a.remove():n(a),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof qt))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var u,l=e[s],c=n[s],f=l.length,h=o[s]=new Array(f),d=0;d<f;++d)(u=l[d]||c[d])&&(h[d]=u);for(;s<r;++s)o[s]=e[s];return new qt(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=nt);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,s=n[a],u=s.length,l=i[a]=new Array(u),c=0;c<u;++c)(o=s[c])&&(l[c]=o);l.sort(e)}return new qt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],o=0,s=a.length;o<s;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,e){var n=F(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?it:rt:"function"==typeof e?n.local?ut:st:n.local?ot:at)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ct:"function"==typeof e?ht:ft)(t,e,null==n?"":n)):dt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?gt:"function"==typeof e?vt:pt)(t,e)):this.node()[t]},classed:function(t,e){var n=mt(t+"");if(arguments.length<2){for(var r=yt(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Mt:e?kt:_t)(n,e))},text:function(t){return arguments.length?this.each(null==t?St:("function"==typeof t?Nt:At)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?It:("function"==typeof t?Tt:Ct)(t)):this.node().innerHTML},raise:function(){return this.each(Ot)},lower:function(){return this.each(Dt)},append:function(t){var e="function"==typeof t?t:R(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:R(t),r=null==e?Et:"function"==typeof e?e:Y(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Lt)},clone:function(t){return this.select(t?Pt:Ft)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=Bt(t+""),o=a.length;if(!(arguments.length<2)){for(s=e?jt:Rt,r=0;r<o;++r)this.each(s(a[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<o;++r)if((i=a[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Vt:Ut)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],a=0,o=i.length;a<o;++a)(r=i[a])&&(yield r)}};var Gt=1/.7,Kt="\\s*([+-]?\\d+)\\s*",Zt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Qt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",te=/^#([0-9a-f]{3,8})$/,ee=new RegExp("^rgb\\("+[Kt,Kt,Kt]+"\\)$"),ne=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),re=new RegExp("^rgba\\("+[Kt,Kt,Kt,Zt]+"\\)$"),ie=new RegExp("^rgba\\("+[Qt,Qt,Qt,Zt]+"\\)$"),ae=new RegExp("^hsl\\("+[Zt,Qt,Qt]+"\\)$"),oe=new RegExp("^hsla\\("+[Zt,Qt,Qt,Zt]+"\\)$"),se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function ue(){return this.rgb().formatHex()}function le(){return this.rgb().formatRgb()}function ce(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=te.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?fe(e):3===n?new pe(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?he(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?he(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ee.exec(t))?new pe(e[1],e[2],e[3],1):(e=ne.exec(t))?new pe(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=re.exec(t))?he(e[1],e[2],e[3],e[4]):(e=ie.exec(t))?he(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ae.exec(t))?we(e[1],e[2]/100,e[3]/100,1):(e=oe.exec(t))?we(e[1],e[2]/100,e[3]/100,e[4]):se.hasOwnProperty(t)?fe(se[t]):"transparent"===t?new pe(NaN,NaN,NaN,0):null}function fe(t){return new pe(t>>16&255,t>>8&255,255&t,1)}function he(t,e,n,r){return r<=0&&(t=e=n=NaN),new pe(t,e,n,r)}function de(t){return t instanceof Xt||(t=ce(t)),t?new pe((t=t.rgb()).r,t.g,t.b,t.opacity):new pe}function ge(t,e,n,r){return 1===arguments.length?de(t):new pe(t,e,n,null==r?1:r)}function pe(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function ve(){return"#"+ye(this.r)+ye(this.g)+ye(this.b)}function me(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ye(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function we(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new xe(t,e,n,r)}function be(t){if(t instanceof xe)return new xe(t.h,t.s,t.l,t.opacity);if(t instanceof Xt||(t=ce(t)),!t)return new xe;if(t instanceof xe)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),o=NaN,s=a-i,u=(a+i)/2;return s?(o=e===a?(n-r)/s+6*(n<r):n===a?(r-e)/s+2:(e-n)/s+4,s/=u<.5?a+i:2-a-i,o*=60):s=u>0&&u<1?0:o,new xe(o,s,u,t.opacity)}function xe(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ke(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}zt(Xt,ce,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:ue,formatHex:ue,formatHsl:function(){return be(this).formatHsl()},formatRgb:le,toString:le}),zt(pe,ge,Jt(Xt,{brighter:function(t){return t=null==t?Gt:Math.pow(Gt,t),new pe(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new pe(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ve,formatHex:ve,formatRgb:me,toString:me})),zt(xe,(function(t,e,n,r){return 1===arguments.length?be(t):new xe(t,e,n,null==r?1:r)}),Jt(Xt,{brighter:function(t){return t=null==t?Gt:Math.pow(Gt,t),new xe(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new xe(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new pe(ke(t>=240?t-240:t+120,i,r),ke(t,i,r),ke(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var _e=t=>()=>t;function Me(t){return 1==(t=+t)?Se:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):_e(isNaN(e)?n:e)}}function Se(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):_e(isNaN(t)?e:t)}var Ae=function t(e){var n=Me(e);function r(t,e){var r=n((t=ge(t)).r,(e=ge(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=Se(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Ne(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(a){for(n=0;n<r;++n)i[n]=t[n]*(1-a)+e[n]*a;return i}}function Ie(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=Fe(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<i;++n)o[n]=a[n](t);return o}}function Ce(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Te(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Oe(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Fe(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var De=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ee=new RegExp(De.source,"g");function Le(t,e){var n,r,i,a=De.lastIndex=Ee.lastIndex=0,o=-1,s=[],u=[];for(t+="",e+="";(n=De.exec(t))&&(r=Ee.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),s[o]?s[o]+=i:s[++o]=i),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,u.push({i:o,x:Te(n,r)})),a=Ee.lastIndex;return a<e.length&&(i=e.slice(a),s[o]?s[o]+=i:s[++o]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function Fe(t,e){var n,r=typeof e;return null==e||"boolean"===r?_e(e):("number"===r?Te:"string"===r?(n=ce(e))?(e=n,Ae):Le:e instanceof ce?Ae:e instanceof Date?Ce:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Ne:Array.isArray(e)?Ie:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Oe:Te)(t,e)}function Pe(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var Be,Re=180/Math.PI,je={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ye(t,e,n,r,i,a){var o,s,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*Re,skewX:Math.atan(u)*Re,scaleX:o,scaleY:s}}function Ue(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var s=[],u=[];return a=t(a),o=t(o),function(t,r,i,a,o,s){if(t!==i||r!==a){var u=o.push("translate(",null,e,null,n);s.push({i:u-4,x:Te(t,i)},{i:u-2,x:Te(r,a)})}else(i||a)&&o.push("translate("+i+e+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,s,u),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Te(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,o.rotate,s,u),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Te(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,o.skewX,s,u),function(t,e,n,r,a,o){if(t!==n||e!==r){var s=a.push(i(a)+"scale(",null,",",null,")");o.push({i:s-4,x:Te(t,n)},{i:s-2,x:Te(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,s,u),a=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var Ve,We,qe=Ue((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?je:Ye(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),$e=Ue((function(t){return null==t?je:(Be||(Be=document.createElementNS("http://www.w3.org/2000/svg","g")),Be.setAttribute("transform",t),(t=Be.transform.baseVal.consolidate())?Ye((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):je)}),", ",")",")"),He=0,ze=0,Je=0,Xe=0,Ge=0,Ke=0,Ze="object"==typeof performance&&performance.now?performance:Date,Qe="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function tn(){return Ge||(Qe(en),Ge=Ze.now()+Ke)}function en(){Ge=0}function nn(){this._call=this._time=this._next=null}function rn(t,e,n){var r=new nn;return r.restart(t,e,n),r}function an(){Ge=(Xe=Ze.now())+Ke,He=ze=0;try{!function(){tn(),++He;for(var t,e=Ve;e;)(t=Ge-e._time)>=0&&e._call.call(null,t),e=e._next;--He}()}finally{He=0,function(){var t,e,n=Ve,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ve=e);We=t,sn(r)}(),Ge=0}}function on(){var t=Ze.now(),e=t-Xe;e>1e3&&(Ke-=e,Xe=t)}function sn(t){He||(ze&&(ze=clearTimeout(ze)),t-Ge>24?(t<1/0&&(ze=setTimeout(an,t-Ze.now()-Ke)),Je&&(Je=clearInterval(Je))):(Je||(Xe=Ze.now(),Je=setInterval(on,1e3)),He=1,Qe(an)))}function un(t,e,n){var r=new nn;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}nn.prototype=rn.prototype={constructor:nn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?tn():+n)+(null==e?0:+e),this._next||We===this||(We?We._next=this:Ve=this,We=this),this._call=t,this._time=n,sn()},stop:function(){this._call&&(this._call=null,this._time=1/0,sn())}};var ln=I("start","end","cancel","interrupt"),cn=[];function fn(t,e,n,r,i,a){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(a){var l,c,f,h;if(1!==n.state)return u();for(l in i)if((h=i[l]).name===n.name){if(3===h.state)return un(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(un((function(){3===n.state&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(a))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),a=-1,o=r.length;++a<o;)r[a].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=rn(a,0,n.time)}(t,n,{name:e,index:r,group:i,on:ln,tween:cn,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:0})}function hn(t,e){var n=gn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function dn(t,e){var n=gn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function gn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function pn(t,e){var n,r;return function(){var i=dn(this,t),a=i.tween;if(a!==n)for(var o=0,s=(r=n=a).length;o<s;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}i.tween=r}}function vn(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=dn(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}a.tween=i}}function mn(t,e,n){var r=t._id;return t.each((function(){var t=dn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return gn(t,r).value[e]}}function yn(t,e){var n;return("number"==typeof e?Te:e instanceof ce?Ae:(n=ce(e))?(e=n,Ae):Le)(t,e)}function wn(t){return function(){this.removeAttribute(t)}}function bn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function xn(t,e,n){var r,i,a=n+"";return function(){var o=this.getAttribute(t);return o===a?null:o===r?i:i=e(r=o,n)}}function kn(t,e,n){var r,i,a=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===a?null:o===r?i:i=e(r=o,n)}}function _n(t,e,n){var r,i,a;return function(){var o,s,u=n(this);if(null!=u)return(o=this.getAttribute(t))===(s=u+"")?null:o===r&&s===i?a:(i=s,a=e(r=o,u));this.removeAttribute(t)}}function Mn(t,e,n){var r,i,a;return function(){var o,s,u=n(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:o===r&&s===i?a:(i=s,a=e(r=o,u));this.removeAttributeNS(t.space,t.local)}}function Sn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function An(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Nn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&An(t,i)),n}return i._value=e,i}function In(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Sn(t,i)),n}return i._value=e,i}function Cn(t,e){return function(){hn(this,t).delay=+e.apply(this,arguments)}}function Tn(t,e){return e=+e,function(){hn(this,t).delay=e}}function On(t,e){return function(){dn(this,t).duration=+e.apply(this,arguments)}}function Dn(t,e){return e=+e,function(){dn(this,t).duration=e}}function En(t,e){if("function"!=typeof e)throw new Error;return function(){dn(this,t).ease=e}}function Ln(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?hn:dn;return function(){var o=a(this,t),s=o.on;s!==r&&(i=(r=s).copy()).on(e,n),o.on=i}}var Fn=$t.prototype.constructor;function Pn(t){return function(){this.style.removeProperty(t)}}function Bn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Rn(t,e,n){var r,i;function a(){var a=e.apply(this,arguments);return a!==i&&(r=(i=a)&&Bn(t,a,n)),r}return a._value=e,a}function jn(t){return function(e){this.textContent=t.call(this,e)}}function Yn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&jn(r)),e}return r._value=t,r}var Un=0;function Vn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Wn(){return++Un}var qn=$t.prototype;Vn.prototype={constructor:Vn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Y(t));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var s,u,l=r[o],c=l.length,f=a[o]=new Array(c),h=0;h<c;++h)(s=l[h])&&(u=t.call(s,s.__data__,h,l))&&("__data__"in s&&(u.__data__=s.__data__),f[h]=u,fn(f[h],e,n,h,f,gn(s,n)));return new Vn(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=W(t));for(var r=this._groups,i=r.length,a=[],o=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,f=0;f<c;++f)if(u=l[f]){for(var h,d=t.call(u,u.__data__,f,l),g=gn(u,n),p=0,v=d.length;p<v;++p)(h=d[p])&&fn(h,e,n,p,d,g);a.push(d),o.push(u)}return new Vn(a,o,e,n)},filter:function(t){"function"!=typeof t&&(t=q(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],s=o.length,u=r[i]=[],l=0;l<s;++l)(a=o[l])&&t.call(a,a.__data__,l,o)&&u.push(a);return new Vn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var u,l=e[s],c=n[s],f=l.length,h=o[s]=new Array(f),d=0;d<f;++d)(u=l[d]||c[d])&&(h[d]=u);for(;s<r;++s)o[s]=e[s];return new Vn(o,this._parents,this._name,this._id)},selection:function(){return new Fn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Wn(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],u=s.length,l=0;l<u;++l)if(o=s[l]){var c=gn(o,e);fn(o,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Vn(r,this._parents,t,n)},call:qn.call,nodes:qn.nodes,node:qn.node,size:qn.size,empty:qn.empty,each:qn.each,on:function(t,e){var n=this._id;return arguments.length<2?gn(this.node(),n).on.on(t):this.each(Ln(n,t,e))},attr:function(t,e){var n=F(t),r="transform"===n?$e:yn;return this.attrTween(t,"function"==typeof e?(n.local?Mn:_n)(n,r,mn(this,"attr."+t,e)):null==e?(n.local?bn:wn)(n):(n.local?kn:xn)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=F(t);return this.tween(n,(r.local?Nn:In)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?qe:yn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=dt(this,t),o=(this.style.removeProperty(t),dt(this,t));return a===o?null:a===n&&o===r?i:i=e(n=a,r=o)}}(t,r)).on("end.style."+t,Pn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,a;return function(){var o=dt(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=dt(this,t)),o===u?null:o===r&&u===i?a:(i=u,a=e(r=o,s))}}(t,r,mn(this,"style."+t,e))).each(function(t,e){var n,r,i,a,o="style."+e,s="end."+o;return function(){var u=dn(this,t),l=u.on,c=null==u.value[o]?a||(a=Pn(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,a=n+"";return function(){var o=dt(this,t);return o===a?null:o===r?i:i=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Rn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(mn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Yn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=gn(this.node(),n).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?pn:vn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Cn:Tn)(e,t)):gn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?On:Dn)(e,t)):gn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(En(e,t)):gn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;dn(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(a,o){var s={value:o},u={value:function(){0==--i&&a()}};n.each((function(){var n=dn(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e})),0===i&&a()}))},[Symbol.iterator]:qn[Symbol.iterator]};var $n={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Hn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}$t.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,a=t.__transition,o=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete a[i]):o=!1;o&&delete t.__transition}}(this,t)}))},$t.prototype.transition=function(t){var e,n;t instanceof Vn?(e=t._id,t=t._name):(e=Wn(),(n=$n).time=tn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],u=s.length,l=0;l<u;++l)(o=s[l])&&fn(o,t,e,l,s,n||Hn(o,e));return new Vn(r,this._parents,t,e)};const zn=Math.PI,Jn=2*zn,Xn=Jn-1e-6;function Gn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Kn(){return new Gn}function Zn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function Qn(t){return(t=Zn(Math.abs(t)))?t[1]:NaN}Gn.prototype=Kn.prototype={constructor:Gn,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,o=this._y1,s=n-t,u=r-e,l=a-t,c=o-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var h=n-a,d=r-o,g=s*s+u*u,p=h*h+d*d,v=Math.sqrt(g),m=Math.sqrt(f),y=i*Math.tan((zn-Math.acos((g+f-p)/(2*v*m)))/2),w=y/m,b=y/v;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*l)+","+(e+w*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*d)+","+(this._x1=t+b*s)+","+(this._y1=e+b*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e,a=!!a;var o=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+o,l=e+s,c=1^a,f=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(f<0&&(f=f%Jn+Jn),f>Xn?this._+="A"+n+","+n+",0,1,"+c+","+(t-o)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=zn)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var tr,er=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function nr(t){if(!(e=er.exec(t)))throw new Error("invalid format: "+t);var e;return new rr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function rr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function ir(t,e){var n=Zn(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}nr.prototype=rr.prototype,rr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ar={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>ir(100*t,e),r:ir,s:function(t,e){var n=Zn(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(tr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Zn(t,Math.max(0,e+a-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function or(t){return t}var sr,ur,lr,cr=Array.prototype.map,fr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function hr(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?or:(e=cr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,a=[],o=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),a.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[o=(o+1)%e.length];return a.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?or:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(cr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=nr(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,v=t.precision,m=t.trim,y=t.type;"n"===y?(p=!0,y="g"):ar[y]||(void 0===v&&(v=12),m=!0,y="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",b="$"===h?a:/[%p]/.test(y)?u:"",x=ar[y],k=/[defgprs%]/.test(y);function _(t){var i,a,u,h=w,_=b;if("c"===y)_=x(t)+_,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),v),m&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==f&&(M=!1),h=(M?"("===f?f:l:"-"===f||"("===f?"":f)+h,_=("s"===y?fr[8+tr/3]:"")+_+(M&&"("===f?")":""),k)for(i=-1,a=t.length;++i<a;)if(48>(u=t.charCodeAt(i))||u>57){_=(46===u?o+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}p&&!d&&(t=r(t,1/0));var S=h.length+t.length+_.length,A=S<g?new Array(g-S+1).join(e):"";switch(p&&d&&(t=r(A+t,A.length?g-_.length:1/0),A=""),n){case"<":t=h+t+_+A;break;case"=":t=h+A+t+_;break;case"^":t=A.slice(0,S=A.length>>1)+h+t+_+A.slice(S);break;default:t=A+h+t+_}return s(t)}return v=void 0===v?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),_.toString=function(){return t+""},_}return{format:f,formatPrefix:function(t,e){var n=f(((t=nr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Qn(e)/3))),i=Math.pow(10,-r),a=fr[8+r/3];return function(t){return n(i*t)+a}}}}function dr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function gr(t){return+t}sr=hr({thousands:",",grouping:[3],currency:["$",""]}),ur=sr.format,lr=sr.formatPrefix;var pr=[0,1];function vr(t){return t}function mr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function yr(t,e,n){var r=t[0],i=t[1],a=e[0],o=e[1];return i<r?(r=mr(i,r),a=n(o,a)):(r=mr(r,i),a=n(a,o)),function(t){return a(r(t))}}function wr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),a=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)i[s]=mr(t[s],t[s+1]),a[s]=n(e[s],e[s+1]);return function(e){var n=o(t,e,1,r)-1;return a[n](i[n](e))}}function br(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function xr(){var t,e,n,r,i,a,o=pr,s=pr,u=Fe,l=vr;function c(){var t,e,n,u=Math.min(o.length,s.length);return l!==vr&&(t=o[0],e=o[u-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?wr:yr,i=a=null,f}function f(e){return null==e||isNaN(e=+e)?n:(i||(i=r(o.map(t),s,u)))(t(l(e)))}return f.invert=function(n){return l(e((a||(a=r(s,o.map(t),Te)))(n)))},f.domain=function(t){return arguments.length?(o=Array.from(t,gr),c()):o.slice()},f.range=function(t){return arguments.length?(s=Array.from(t),c()):s.slice()},f.rangeRound=function(t){return s=Array.from(t),u=Pe,c()},f.clamp=function(t){return arguments.length?(l=!!t||vr,c()):l!==vr},f.interpolate=function(t){return arguments.length?(u=t,c()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function kr(){return xr()(vr,vr)}function _r(t,e,n,r){var i,a=h(t,e,n);switch((r=nr(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Qn(e)/3)))-Qn(Math.abs(t)))}(a,o))||(r.precision=i),lr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Qn(e)-Qn(t))+1}(a,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Qn(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return ur(r)}function Mr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,a,o,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=f(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,a=new Array(i=r-n+1);++s<i;)a[s]=(n+s)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,a=new Array(i=r-n+1);++s<i;)a[s]=(n+s)/o}return r&&a.reverse(),a}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return _r(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,a=e(),o=0,s=a.length-1,u=a[o],l=a[s],c=10;for(l<u&&(i=u,u=l,l=i,i=o,o=s,s=i);c-- >0;){if((i=f(u,l,n))===r)return a[o]=u,a[s]=l,e(a);if(i>0)u=Math.floor(u/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function Sr(){var t=kr();return t.copy=function(){return br(t,Sr())},dr.apply(t,arguments),Mr(t)}var Ar=new Date,Nr=new Date;function Ir(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var o,s=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return s;do{s.push(o=new Date(+n)),e(n,a),t(n)}while(o<n&&n<r);return s},i.filter=function(n){return Ir((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return Ar.setTime(+e),Nr.setTime(+r),t(Ar),t(Nr),Math.floor(n(Ar,Nr))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Cr=Ir((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));Cr.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ir((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Cr:null};var Tr=Ir((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),Or=Ir((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),Dr=Ir((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),Er=Ir((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function Lr(t){return Ir((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Fr=Lr(0),Pr=Lr(1);Lr(2),Lr(3);var Br=Lr(4);Lr(5),Lr(6);var Rr=Ir((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),jr=Ir((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));jr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ir((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},Ir((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),Ir((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var Yr=Ir((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function Ur(t){return Ir((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Vr=Ur(0),Wr=Ur(1);Ur(2),Ur(3);var qr=Ur(4);Ur(5),Ur(6),Ir((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var $r=Ir((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));$r.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ir((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[Hr,zr]=function(t,e,n,r,i,o){const s=[[Tr,1,1e3],[Tr,5,5e3],[Tr,15,15e3],[Tr,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function u(e,n,r){const i=Math.abs(n-e)/r,o=a((([,,t])=>t)).right(s,i);if(o===s.length)return t.every(h(e/31536e6,n/31536e6,r));if(0===o)return Cr.every(Math.max(h(e,n,r),1));const[u,l]=s[i/s[o-1][2]<s[o][2]/i?o-1:o];return u.every(l)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const i=n&&"function"==typeof n.range?n:u(t,e,n),a=i?i.range(t,+e+1):[];return r?a.reverse():a},u]}(jr,Rr,Fr,Er,Dr,Or);function Jr(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Xr(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Gr(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Kr,Zr,Qr={"-":"",_:" ",0:"0"},ti=/^\s*\d+/,ei=/^%/,ni=/[\\^$*+?|[\]().{}]/g;function ri(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function ii(t){return t.replace(ni,"\\$&")}function ai(t){return new RegExp("^(?:"+t.map(ii).join("|")+")","i")}function oi(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function si(t,e,n){var r=ti.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function ui(t,e,n){var r=ti.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function li(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function ci(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function fi(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function hi(t,e,n){var r=ti.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function di(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function gi(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function pi(t,e,n){var r=ti.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function vi(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function mi(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function yi(t,e,n){var r=ti.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function wi(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function bi(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function xi(t,e,n){var r=ti.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ki(t,e,n){var r=ti.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function _i(t,e,n){var r=ti.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Mi(t,e,n){var r=ei.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Si(t,e,n){var r=ti.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Ai(t,e,n){var r=ti.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Ni(t,e){return ri(t.getDate(),e,2)}function Ii(t,e){return ri(t.getHours(),e,2)}function Ci(t,e){return ri(t.getHours()%12||12,e,2)}function Ti(t,e){return ri(1+Er.count(jr(t),t),e,3)}function Oi(t,e){return ri(t.getMilliseconds(),e,3)}function Di(t,e){return Oi(t,e)+"000"}function Ei(t,e){return ri(t.getMonth()+1,e,2)}function Li(t,e){return ri(t.getMinutes(),e,2)}function Fi(t,e){return ri(t.getSeconds(),e,2)}function Pi(t){var e=t.getDay();return 0===e?7:e}function Bi(t,e){return ri(Fr.count(jr(t)-1,t),e,2)}function Ri(t){var e=t.getDay();return e>=4||0===e?Br(t):Br.ceil(t)}function ji(t,e){return t=Ri(t),ri(Br.count(jr(t),t)+(4===jr(t).getDay()),e,2)}function Yi(t){return t.getDay()}function Ui(t,e){return ri(Pr.count(jr(t)-1,t),e,2)}function Vi(t,e){return ri(t.getFullYear()%100,e,2)}function Wi(t,e){return ri((t=Ri(t)).getFullYear()%100,e,2)}function qi(t,e){return ri(t.getFullYear()%1e4,e,4)}function $i(t,e){var n=t.getDay();return ri((t=n>=4||0===n?Br(t):Br.ceil(t)).getFullYear()%1e4,e,4)}function Hi(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ri(e/60|0,"0",2)+ri(e%60,"0",2)}function zi(t,e){return ri(t.getUTCDate(),e,2)}function Ji(t,e){return ri(t.getUTCHours(),e,2)}function Xi(t,e){return ri(t.getUTCHours()%12||12,e,2)}function Gi(t,e){return ri(1+Yr.count($r(t),t),e,3)}function Ki(t,e){return ri(t.getUTCMilliseconds(),e,3)}function Zi(t,e){return Ki(t,e)+"000"}function Qi(t,e){return ri(t.getUTCMonth()+1,e,2)}function ta(t,e){return ri(t.getUTCMinutes(),e,2)}function ea(t,e){return ri(t.getUTCSeconds(),e,2)}function na(t){var e=t.getUTCDay();return 0===e?7:e}function ra(t,e){return ri(Vr.count($r(t)-1,t),e,2)}function ia(t){var e=t.getUTCDay();return e>=4||0===e?qr(t):qr.ceil(t)}function aa(t,e){return t=ia(t),ri(qr.count($r(t),t)+(4===$r(t).getUTCDay()),e,2)}function oa(t){return t.getUTCDay()}function sa(t,e){return ri(Wr.count($r(t)-1,t),e,2)}function ua(t,e){return ri(t.getUTCFullYear()%100,e,2)}function la(t,e){return ri((t=ia(t)).getUTCFullYear()%100,e,2)}function ca(t,e){return ri(t.getUTCFullYear()%1e4,e,4)}function fa(t,e){var n=t.getUTCDay();return ri((t=n>=4||0===n?qr(t):qr.ceil(t)).getUTCFullYear()%1e4,e,4)}function ha(){return"+0000"}function da(){return"%"}function ga(t){return+t}function pa(t){return Math.floor(+t/1e3)}function va(t){return new Date(t)}function ma(t){return t instanceof Date?+t:+new Date(+t)}function ya(t,e,n,r,i,a,o,s,u,l){var c=kr(),f=c.invert,h=c.domain,d=l(".%L"),g=l(":%S"),p=l("%I:%M"),v=l("%I %p"),m=l("%a %d"),y=l("%b %d"),w=l("%B"),b=l("%Y");function x(t){return(u(t)<t?d:s(t)<t?g:o(t)<t?p:a(t)<t?v:r(t)<t?i(t)<t?m:y:n(t)<t?w:b)(t)}return c.invert=function(t){return new Date(f(t))},c.domain=function(t){return arguments.length?h(Array.from(t,ma)):h().map(va)},c.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?x:l(e)},c.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,i=(t=t.slice()).length-1,a=t[r],o=t[i];return o<a&&(n=r,r=i,i=n,n=a,a=o,o=n),t[r]=e.floor(a),t[i]=e.ceil(o),t}(n,t)):c},c.copy=function(){return br(c,ya(t,e,n,r,i,a,o,s,u,l))},c}function wa(t){return function(){return t}}function ba(t){this._context=t}function xa(t){return new ba(t)}function ka(t){return t[0]}function _a(t){return t[1]}function Ma(t,e){var n=wa(!0),r=null,i=xa,a=null;function o(o){var s,u,l,c=(o=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(o)).length,f=!1;for(null==r&&(a=i(l=Kn())),s=0;s<=c;++s)!(s<c&&n(u=o[s],s,o))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+t(u,s,o),+e(u,s,o));if(l)return a=null,l+""||null}return t="function"==typeof t?t:void 0===t?ka:wa(t),e="function"==typeof e?e:void 0===e?_a:wa(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:wa(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:wa(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:wa(!!t),o):n},o.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),o):r},o}!function(t){Kr=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,s=t.months,u=t.shortMonths,l=ai(i),c=oi(i),f=ai(a),h=oi(a),d=ai(o),g=oi(o),p=ai(s),v=oi(s),m=ai(u),y=oi(u),w={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Ni,e:Ni,f:Di,g:Wi,G:$i,H:Ii,I:Ci,j:Ti,L:Oi,m:Ei,M:Li,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ga,s:pa,S:Fi,u:Pi,U:Bi,V:ji,w:Yi,W:Ui,x:null,X:null,y:Vi,Y:qi,Z:Hi,"%":da},b={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:zi,e:zi,f:Zi,g:la,G:fa,H:Ji,I:Xi,j:Gi,L:Ki,m:Qi,M:ta,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ga,s:pa,S:ea,u:na,U:ra,V:aa,w:oa,W:sa,x:null,X:null,y:ua,Y:ca,Z:ha,"%":da},x={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return M(t,e,n,r)},d:mi,e:mi,f:_i,g:di,G:hi,H:wi,I:wi,j:yi,L:ki,m:vi,M:bi,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:pi,Q:Si,s:Ai,S:xi,u:ui,U:li,V:ci,w:si,W:fi,x:function(t,e,r){return M(t,n,e,r)},X:function(t,e,n){return M(t,r,e,n)},y:di,Y:hi,Z:gi,"%":Mi};function k(t,e){return function(n){var r,i,a,o=[],s=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===t.charCodeAt(s)&&(o.push(t.slice(u,s)),null!=(i=Qr[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),o.push(r),u=s+1);return o.push(t.slice(u,s)),o.join("")}}function _(t,e){return function(n){var r,i,a=Gr(1900,void 0,1);if(M(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("s"in a)return new Date(1e3*a.s+("L"in a?a.L:0));if(e&&!("Z"in a)&&(a.Z=0),"p"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m="q"in a?a.q:0),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=Xr(Gr(a.y,0,1))).getUTCDay(),r=i>4||0===i?Wr.ceil(r):Wr(r),r=Yr.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=Jr(Gr(a.y,0,1))).getDay(),r=i>4||0===i?Pr.ceil(r):Pr(r),r=Er.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?Xr(Gr(a.y,0,1)).getUTCDay():Jr(Gr(a.y,0,1)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Xr(a)):Jr(a)}}function M(t,e,n,r){for(var i,a,o=0,s=e.length,u=n.length;o<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(a=x[i in Qr?e.charAt(o++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return w.x=k(n,w),w.X=k(r,w),w.c=k(e,w),b.x=k(n,b),b.X=k(r,b),b.c=k(e,b),{format:function(t){var e=k(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=_(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=k(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=_(t+="",!0);return e.toString=function(){return t},e}}}(t),Zr=Kr.format,Kr.parse,Kr.utcFormat,Kr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),ba.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};class Sa{constructor(t,e){this.date=t,this.value=e}}class Aa{constructor(t,e,n){this.type=e,this.target=n,this.id=t,this.subId=-1;let r,i=new RegExp("\\[(?<value>[0-9]+)\\]","gm");for(;r=i.exec(n);)if(void 0!==r.groups.value){let t=parseFloat(r.groups.value);Number.isNumber(t)&&(this.subId=t,this.parentTarget=n.replace(i,""));break}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getSubId(){return this.subId}}class Na{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.lineInfo=null,this.barInfo=null;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}getName(){return this.name}setName(t){this.name=t}getLineInfo(){return this.lineInfo}setLineInfo(t){this.lineInfo=t}getBarInfo(){return this.barInfo}setBarInfo(t){this.barInfo=t}getId(){return this.id}setId(t){this.id=t}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e))}getYMin(){return this.yMin}getYMax(){return this.yMax}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new Sa(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class Ia{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new Na(this,t);return n.setId(t.getId()),e&&(n.setName(e.datasetName[t.getId()]),e.line&&n.setLineInfo(e.line),e.bar&&n.setBarInfo(e.bar)),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class Ca{constructor(t){this.queries=t,this.folder="/",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.output="",this.line=new Oa,this.summary=null,this.bar=null,this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class Ta{constructor(){this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.yMin=[],this.yMax=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}type(){return"CommonChartInfo"}}class Oa extends Ta{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}type(){return"LineInfo"}}class Da extends Ta{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}type(){return"BarInfo"}}class Ea{constructor(){this.template="",this.style=""}}class La{constructor(t){this.translateX=null,this.translateY=null;let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}let Fa=10,Pa=70,Ba=70,Ra=70,ja=500-Ra-Pa,Ya=400-Fa-Ba,Ua=90,Va=45;function Wa(t,e="",n=""){var r=Ht("body").append("svg");let i=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&i.attr("class",e),n&&i.attr("transform","rotate("+n+")");var a=r.node().getBBox();return r.remove(),{width:a.width,height:a.height}}function qa(t,e,n,r){let i=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let i=-1;for(let a of t)null!=(a=e(a,++i,t))&&(void 0===n?a>=a&&(n=r=a):(n>a&&(n=a),r<a&&(r=a)))}return[n,r]}(n.getDates()),a=function(){return dr.apply(ya(Hr,zr,jr,Rr,Fr,Er,Dr,Or,Tr,Zr).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(i).range([0,ja]),o=function(t){let e,n=t.getDates().length;return e=n<=15?Er:n<=60?Er.every(4):n<=105?Fr:n<=450?Rr:n<=900?Rr.every(2):jr,e}(n),s=function(t){let e,n=t.getDates().length;return e=Zr(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}(n),u=(l=a,A(3,l)).ticks(o).tickFormat(s);var l;let c=e.append("g").attr("id","xAxis").attr("transform","translate(0,"+Ya+")").call(u).attr("class","tracker-axis");r.xAxisColor&&c.style("stroke",r.xAxisColor);let f=Wa("99-99-99"),h=c.selectAll("text").attr("x",-1*f.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");r.xAxisColor&&h.style("fill",r.xAxisColor);let d=f.width*Math.sin(65/180*Math.PI),g=c.append("text").text(r.xAxisLabel).attr("transform","translate("+ja/2+","+(6+d)+")").attr("class","tracker-axis-label");r.xAxisLabelColor&&g.style("fill",r.xAxisLabelColor);let p=parseFloat(t.attr("height"));return t.attr("height",p+6+d),c.attr("height",6+d),[c,a]}function $a(t,e,n,r,i,a){if(0===a.length)return[null,null];let o=null,s=null;for(let t of a){let e=n.getDatasetById(t);(null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===s||e.getYMax()>s)&&(s=e.getYMax())}let u="left"===i?r.yMin[0]:r.yMin[1],l=!1;"number"!=typeof u?u=o:l=!0;let c="left"===i?r.yMax[0]:r.yMax[1],f=!1;if("number"!=typeof c?c=s:f=!0,c<u){let t=u;u=c,c=t;let e=l;l=f,f=e}let h,d,g=c-u,p=Sr();h=l?u:u-.2*g,d=f?c:c+.2*g,"BarInfo"===r.type()&&(d<0&&(d=0),h>0&&(h=0)),p.domain([h,d]).range([Ya,0]);let v,m="left"===i?r.yAxisColor[0]:r.yAxisColor[1],y="left"===i?r.yAxisLabelColor[0]:r.yAxisLabelColor[1],w="left"===i?r.yAxisLabel[0]:r.yAxisLabel[1],b="left"===i?r.yAxisUnit[0]:r.yAxisUnit[1];v="left"===i?A(4,p):function(t){return A(2,t)}(p);let x=e.append("g").attr("id","yAxis").call(v).attr("class","tracker-axis");"right"==i&&x.attr("transform","translate("+ja+" ,0)");let k=x.selectAll("path");m&&k.style("stroke",m);let _=x.selectAll("line");m&&_.style("stroke",m);let M=x.selectAll("text").attr("class","tracker-tick-label");m&&M.style("fill",m);let S=_r(h,d,10),N=Wa(S(h),"tracker-axis-label"),I=Wa(S(d),"tracker-axis-label"),C=Math.max(N.width,I.width);""!==b&&(w+=" ("+b+")");let T=Wa(w),O=x.append("text").text(w).attr("transform","rotate(-90)").attr("x",-Ya/2).attr("class","tracker-axis-label");return"left"===i?O.attr("y",-6-C-T.height/2):O.attr("y",6+C+T.height/2),y&&O.style("fill",y),x.attr("width",T.height+C+6),[x,p]}function Ha(t,e,n,r,i){if(e.showLine[n.getId()]){let a=Ma().defined((function(t){return null!==t.value})).x((function(t){return r(t.date)})).y((function(t){return i(t.value)})),o=t.append("path").attr("class","tracker-line").style("stroke-width",e.lineWidth[n.getId()]);e.fillGap[n.getId()]?o.datum(Array.from(n).filter((function(t){return null!==t.value}))).attr("d",a):o.datum(n).attr("d",a),e.lineColor[n.getId()]&&o.style("stroke",e.lineColor[n.getId()])}}function za(t,e,n,r,i,a){if(n.showPoint[r.getId()]){let o=t.selectAll("dot").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",n.pointSize[r.getId()]).attr("cx",(function(t){return i(t.date)})).attr("cy",(function(t){return a(t.value)})).attr("date",(function(t){return Zr("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("class","tracker-dot");if(n.pointColor[r.getId()]&&(o.style("fill",n.pointColor[r.getId()]),n.pointBorderColor[r.getId()]&&n.pointBorderWidth[r.getId()]>0&&(o.style("stroke",n.pointBorderColor[r.getId()]),o.style("stroke-width",n.pointBorderWidth[r.getId()]))),n.allowInspectData){let t=e.append("g").style("opacity",0);t.append("rect").attr("width",Ua).attr("height",Va).attr("class","tracker-tooltip");let n=t.append("text").attr("width",Ua).attr("height",Va).attr("class","tracker-tooltip-label"),r=n.append("tspan").attr("x",4).attr("y",Va/5*2),i=n.append("tspan").attr("x",4).attr("y",Va/5*4);o.on("mouseenter",(function(e){r.text("date:"+Ht(this).attr("date")),i.text("value:"+Ht(this).attr("value"));const[n,a]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}(e);n<ja/2?t.attr("transform","translate("+(n+1.3*Ua)+","+(a-1*Va)+")"):t.attr("transform","translate("+(n-0*Ua)+","+(a-1*Va)+")"),t.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){t.transition().duration(500).style("opacity",0)}))}}}function Ja(t,e,n,r,i,a,o){let s=ja/n.getLength(),u=s;s-1>0&&(u=s-1),u/=o;let l=t.selectAll("bar").data(Array.from(n).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(t,e){if(0===e){let e=a+1-o/2;if(e<1)return r(t.date)-s/2+a*u+e*u}return r(t.date)-s/2+a*u})).attr("y",(function(t){return i(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=a+1-o/2;return t<0?0:t<1?u*t:u}if(e===n.getLength()-1){let t=1-(a+1-o/2);return t<0?0:t<1?u*t:u}return u})).attr("height",(function(t){if(null!==t.value)return Math.abs(i(t.value)-i(0))})).attr("class","tracker-bar");e.barColor[n.getId()]&&l.style("fill",e.barColor[n.getId()])}function Xa(t,e,n,r,i,a,o,s){let u=parseFloat(t.attr("height")),l=parseFloat(t.attr("width")),c=0;n&&(c=parseFloat(n.attr("height")));let f=parseFloat(r.attr("height")),h=0;i&&(h=parseFloat(i.attr("width")));let d=0;a&&(d=parseFloat(a.attr("width")));let g=o.getNames(),p=g.map((function(t){return Wa(t,"tracker-legend-label")})),v=0,m=0;for(let t=0;t<g.length;t++)p[t].width>m&&(m=p[t].width,v=t);let w=m/g[v].length,b=p[v].height,x=g.length,k=2*w,_=b,M=2*w,S=0,A=0;"vertical"===s.legendOrientation?(S=3*k+M+m,A=(x+1)*_):"horizontal"===s.legendOrientation&&(S=(2*k+M)*x+k+y(p,(function(t){return t.width})),A=_+b);let N=0,I=0;if("top"===s.legendPosition){N=Ra+ja/2-S/2,I=Fa+c,t.attr("height",u+A);let n=new La(e.attr("transform"));e.attr("transform","translate("+n.translateX+","+(n.translateY+A)+")")}else if("bottom"===s.legendPosition)N=Ra+ja/2-S/2,I=Fa+c+Ya+f+_,t.attr("height",u+A);else if("left"===s.legendPosition){N=Ra-h-k,I=Fa+c+Ya/2-A/2,t.attr("width",l+S);let n=new La(e.attr("transform"));e.attr("transform","translate("+(n.translateX+S)+","+n.translateY+")")}else{if("right"!==s.legendPosition)return;N=Ra+ja+d+k,I=Fa+c+Ya/2-A/2,t.attr("width",l+S)}let C=t.append("g").attr("id","legend").attr("transform","translate("+N+","+I+")"),T=C.append("rect").attr("class","tracker-legend").attr("width",S).attr("height",A);s.legendBgColor&&T.style("fill",s.legendBgColor),s.legendBorderColor&&T.style("stroke",s.legendBorderColor);let O=k,D=b,E=O+k+M,L=D;if("vertical"===s.legendOrientation){"LineInfo"===s.type()?(C.selectAll("markers").data(g).enter().append("line").attr("x1",O).attr("x2",O+M).attr("y1",(function(t,e){return D+e*_})).attr("y2",(function(t,e){return D+e*_})).style("stroke",(function(t,e){return o.getDatasetById(e).getLineInfo().lineColor[e]})),C.selectAll("markers").data(g).enter().append("circle").attr("cx",O+M/2).attr("cy",(function(t,e){return D+e*_})).attr("r",(function(t,e){return o.getDatasetById(e).getLineInfo().showPoint[e]?o.getDatasetById(e).getLineInfo().pointSize[e]:0})).style("fill",(function(t,e){return o.getDatasetById(e).getLineInfo().pointColor[e]}))):"BarInfo"===s.type()&&C.selectAll("markers").data(g).enter().append("rect").attr("x",O).attr("y",(function(t,e){return D+e*_-b/2})).attr("width",M).attr("height",b).style("fill",(function(t,e){return o.getDatasetById(e).getBarInfo().barColor[e]}));let t=C.selectAll("labels").data(g).enter().append("text").attr("x",E).attr("y",(function(t,e){return L+e*_})).text((function(t){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");"LineInfo"===s.type()?t.style("fill",(function(t,e){return o.getDatasetById(e).getLineInfo().lineColor[e]})):"BarInfo"===s.type()&&t.style("fill",(function(t,e){return o.getDatasetById(e).getBarInfo().barColor[e]}))}else if("horizontal"===s.legendOrientation){let t=0,e=0;"LineInfo"===s.type()?(C.selectAll("markers").data(g).enter().append("line").attr("x1",(function(e,n){return 0===n?t=O:t+=p[n].width+k+M+k,t})).attr("x2",(function(t,n){return 0===n?e=O+M:e+=p[n].width+k+M+k,e})).attr("y1",D).attr("y2",D).style("stroke",(function(t,e){return o.getDatasetById(e).getLineInfo().lineColor[e]})),t=0,C.selectAll("markers").data(g).enter().append("circle").attr("cx",(function(e,n){return 0===n?t=O+M/2:t+=p[n].width+k+M+k,t})).attr("cy",D).attr("r",(function(t,e){return o.getDatasetById(e).getLineInfo().showPoint[e]?o.getDatasetById(e).getLineInfo().pointSize[e]:0})).style("fill",(function(t,e){return o.getDatasetById(e).getLineInfo().pointColor[e]}))):"BarInfo"==s.type()&&(t=0,C.selectAll("markers").data(g).enter().append("rect").attr("x",(function(e,n){return 0===n?t=O:t+=p[n].width+k+M+k,t})).attr("y",D-b/2).attr("width",M).attr("height",b).style("fill",(function(t,e){return o.getDatasetById(e).getBarInfo().barColor[e]}))),t=0;let n=C.selectAll("labels").data(g).enter().append("text").attr("x",(function(e,n){return 0===n?t=E:t+=p[n].width+k+M+k,t})).attr("y",L).text((function(t){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");"LineInfo"===s.type()?n.style("fill",(function(t,e){return o.getDatasetById(e).getLineInfo().lineColor[e]})):"BarInfo"===s.type()&&n.style("fill",(function(t,e){return o.getDatasetById(e).getBarInfo().barColor[e]}))}}function Ga(t,e,n){let r=Wa(n,"tracker-title"),i=parseFloat(t.attr("height"));t.attr("height",i+r.height);let a=new La(e.attr("transform"));return e.attr("transform","translate("+a.translateX+","+(a.translateY+r.height)+")"),t.append("text").text(n).attr("id","title").attr("transform","translate("+(Ra+ja/2)+","+(Fa+r.height/2)+")").attr("height",r.height).attr("class","tracker-title")}function Ka(t,e){let n=Ht(t).append("svg").attr("id","svg").attr("width",ja+Ra+Pa).attr("height",Ya+Fa+Ba),r=n.append("g").attr("id","graphArea").attr("transform","translate("+Ra+","+Fa+")"),i=r.append("g").attr("id","dataArea"),a=null;e.line.title&&(a=Ga(n,r,e.line.title));let[o,s]=qa(n,r,e.datasets,e.line),u=[],l=[];for(let t=0;t<e.line.yAxisLocation.length;t++){"left"===e.line.yAxisLocation[t].toLowerCase()?u.push(t):l.push(t)}let[c,f]=$a(0,r,e.datasets,e.line,"left",u);if(c&&f)for(let t of u){let r=e.datasets.getDatasetById(t);Ha(i,e.line,r,s,f),za(i,n,e.line,r,s,f)}let[h,d]=$a(0,r,e.datasets,e.line,"right",l);if(h&&d)for(let t of l){let r=e.datasets.getDatasetById(t);Ha(i,e.line,r,s,d),za(i,n,e.line,r,s,d)}e.line.showLegend&&Xa(n,r,a,o,c,h,e.datasets,e.line)}function Za(t,e){let n=Ht(t).append("svg").attr("id","svg").attr("width",ja+Ra+Pa).attr("height",Ya+Fa+Ba),r=n.append("g").attr("id","graphArea").attr("transform","translate("+Ra+","+Fa+")"),i=r.append("g").attr("id","dataArea"),a=null;e.bar.title&&(a=Ga(n,r,e.bar.title));let[o,s]=qa(n,r,e.datasets,e.bar),u=[],l=[];for(let t=0;t<e.bar.yAxisLocation.length;t++){"left"===e.bar.yAxisLocation[t].toLowerCase()?u.push(t):l.push(t)}let[c,f]=$a(0,r,e.datasets,e.bar,"left",u),h=u.length+l.length,d=0;if(c&&f)for(let t of u){let n=e.datasets.getDatasetById(t);Ja(i,e.bar,n,s,f,d,h),d++}let[g,p]=$a(0,r,e.datasets,e.bar,"right",l);if(g&&p)for(let t of l){let n=e.datasets.getDatasetById(t);Ja(i,e.bar,n,s,p,d,h),d++}e.bar.showLegend&&Xa(n,r,a,o,c,g,e.datasets,e.bar)}let Qa={min:function(t,e){return g(t.datasets.getDatasetById(e).getValues())},max:function(t,e){return d(t.datasets.getDatasetById(e).getValues())},sum:function(t,e){return y(t.datasets.getDatasetById(e).getValues())},count:function(t,e){return t.datasets.getDatasetById(e).getLengthNotNull()},days:function(t,e){return t.datasets.getDatasetById(e).getLength()},maxStreak:function(t,e){let n=0,r=0,i=t.datasets.getDatasetById(e);for(let t of i)null!==t.value?n++:n=0,n>r&&(r=n);return r},maxBreak:function(t,e){let n=0,r=0,i=t.datasets.getDatasetById(e);for(let t of i)null===t.value?n++:n=0,n>r&&(r=n);return r},lastStreak:function(t,e){let n=0,r=t.datasets.getDatasetById(e).getValues();for(let t=r.length-1;t>=0;t--){if(null===r[t])break;n++}return n},average:function(t,e){let n=t.datasets.getDatasetById(e),r=n.getLengthNotNull();if(r>0){return y(n.getValues())/r}return null},median:function(t,e){let n=t.datasets.getDatasetById(e);return m(n.getValues(),.5,r);var r},variance:function(t,e){return function(t,e){let n,r=0,i=0,a=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-i,i+=n/++r,a+=n*(e-i));else{let o=-1;for(let s of t)null!=(s=e(s,++o,t))&&(s=+s)>=s&&(n=s-i,i+=n/++r,a+=n*(s-i))}if(r>1)return a/(r-1)}(t.datasets.getDatasetById(e).getValues())}};function to(t,e){if(null===e.summary)return"Key 'summary' not foundin YAML";let n="";e.summary.template,n=e.summary.template;let r={};Object.entries(Qa).forEach((([t,i])=>{let a,o=new RegExp("{{\\s*"+t+"(\\(\\s*Dataset\\(\\s*((?<datasetId>\\d+)|(?<datasetName>\\w+))\\s*\\)\\s*\\))?\\s*}}","gm");for(;a=o.exec(n);)if(void 0!==a.groups)if(void 0!==a.groups.datasetId){let n=parseInt(a.groups.datasetId);if(Number.isInteger(n)){let a="{{\\s*"+t+"(\\(\\s*Dataset\\(\\s*"+n.toString()+"\\s*\\)\\s*\\))?\\s*}}";if(!(a in r)){let t=i(e,n),o="{{NA}}";null!=t&&(o=Number.isInteger(t)?t.toFixed(0):t.toFixed(2)),r[a]=o}}}else if(void 0!==a.groups.datasetName){let n=a.groups.datasetName,o="{{\\s*"+t+"(\\(\\s*Dataset\\(\\s*"+n+"\\s*\\)\\s*\\))?\\s*}}",s=e.datasetName.indexOf(n);if(!(o in r)){let t="{{NA}}";if(s>=0){let n=i(e,s);null!=n&&(t=Number.isInteger(n)?n.toFixed(0):n.toFixed(2))}r[o]=t}}else{let n="{{\\s*"+t+"\\s*}}";if(!(n in r)){let t=i(e,0),a="{{NA}}";null!=t&&(a=Number.isInteger(t)?t.toFixed(0):t.toFixed(2)),r[n]=a}}else{let n="{{\\s*"+t+"\\s*}}";if(!(n in r)){let t=i(e,0),a="{{NA}}";null!=t&&(a=Number.isInteger(t)?t.toFixed(0):t.toFixed(2)),r[n]=a}}}));for(let t in r){let e=r[t],i=new RegExp(t,"gi");n=n.replace(i,e)}if(""!==n){let r=Ht(t).append("div");if(n.includes("\n")){let t=n.split("\n");for(let e of t)r.append("div").text(e)}else r.text(n);""!==e.summary.style&&r.attr("style",e.summary.style)}}function eo(t,e){Ht(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}function no(t){return(no="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ro(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function io(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ao(t,e,n){return e&&io(t.prototype,e),n&&io(t,n),t}function oo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function so(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&lo(t,e)}function uo(t){return(uo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function lo(t,e){return(lo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function co(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function fo(t,e,n){return(fo=co()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&lo(i,n.prototype),i}).apply(null,arguments)}function ho(t){var e="function"==typeof Map?new Map:void 0;return(ho=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return fo(t,arguments,uo(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),lo(r,t)})(t)}function go(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function po(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?go(t):e}function vo(t){var e=co();return function(){var n,r=uo(t);if(e){var i=uo(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return po(this,n)}}function mo(t,e,n){return(mo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=uo(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function yo(t,e){return bo(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw a}}return n}(t,e)||xo(t,e)||_o()}function wo(t){return bo(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||xo(t)||_o()}function bo(t){if(Array.isArray(t))return t}function xo(t,e){if(t){if("string"==typeof t)return ko(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ko(t,e):void 0}}function ko(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function _o(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function Mo(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=xo(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw a}}}}var So="&",Ao="#",No="!",Io="-",Co=".",To="ALIAS",Oo="BLANK_LINE",Do="BLOCK_FOLDED",Eo="BLOCK_LITERAL",Lo="COMMENT",Fo="DIRECTIVE",Po="DOCUMENT",Bo="FLOW_MAP",Ro="FLOW_SEQ",jo="MAP",Yo="MAP_KEY",Uo="MAP_VALUE",Vo="PLAIN",Wo="QUOTE_DOUBLE",qo="QUOTE_SINGLE",$o="SEQ",Ho="SEQ_ITEM",zo={MAP:"tag:yaml.org,2002:map",SEQ:"tag:yaml.org,2002:seq",STR:"tag:yaml.org,2002:str"};function Jo(t){for(var e=[0],n=t.indexOf("\n");-1!==n;)n+=1,e.push(n),n=t.indexOf("\n",n);return e}function Xo(t){var e,n;return"string"==typeof t?(e=Jo(t),n=t):(Array.isArray(t)&&(t=t[0]),t&&t.context&&(t.lineStarts||(t.lineStarts=Jo(t.context.src)),e=t.lineStarts,n=t.context.src)),{lineStarts:e,src:n}}function Go(t,e){if("number"!=typeof t||t<0)return null;var n=Xo(e),r=n.lineStarts,i=n.src;if(!r||!i||t>i.length)return null;for(var a=0;a<r.length;++a){var o=r[a];if(t<o)return{line:a,col:t-r[a-1]+1};if(t===o)return{line:a+1,col:1}}var s=r.length;return{line:s,col:t-r[s-1]+1}}function Ko(t,e){var n=Xo(e),r=n.lineStarts,i=n.src;if(!r||!(t>=1)||t>r.length)return null;for(var a=r[t-1],o=r[t];o&&o>a&&"\n"===i[o-1];)--o;return i.slice(a,o)}var Zo=function(){function t(e,n){ro(this,t),this.start=e,this.end=n||e}return ao(t,[{key:"isEmpty",value:function(){return"number"!=typeof this.start||!this.end||this.end<=this.start}},{key:"setOrigRange",value:function(t,e){var n=this.start,r=this.end;if(0===t.length||r<=t[0])return this.origStart=n,this.origEnd=r,e;for(var i=e;i<t.length&&!(t[i]>n);)++i;this.origStart=n+i;for(var a=i;i<t.length&&!(t[i]>=r);)++i;return this.origEnd=r+i,a}}],[{key:"copy",value:function(e){return new t(e.start,e.end)}}]),t}(),Qo=function(){function t(e,n,r){ro(this,t),Object.defineProperty(this,"context",{value:r||null,writable:!0}),this.error=null,this.range=null,this.valueRange=null,this.props=n||[],this.type=e,this.value=null}return ao(t,[{key:"getPropValue",value:function(t,e,n){if(!this.context)return null;var r=this.context.src,i=this.props[t];return i&&r[i.start]===e?r.slice(i.start+(n?1:0),i.end):null}},{key:"anchor",get:function(){for(var t=0;t<this.props.length;++t){var e=this.getPropValue(t,So,!0);if(null!=e)return e}return null}},{key:"comment",get:function(){for(var t=[],e=0;e<this.props.length;++e){var n=this.getPropValue(e,Ao,!0);null!=n&&t.push(n)}return t.length>0?t.join("\n"):null}},{key:"commentHasRequiredWhitespace",value:function(e){var n=this.context.src;if(this.header&&e===this.header.end)return!1;if(!this.valueRange)return!1;var r=this.valueRange.end;return e!==r||t.atBlank(n,r-1)}},{key:"hasComment",get:function(){if(this.context)for(var t=this.context.src,e=0;e<this.props.length;++e)if(t[this.props[e].start]===Ao)return!0;return!1}},{key:"hasProps",get:function(){if(this.context)for(var t=this.context.src,e=0;e<this.props.length;++e)if(t[this.props[e].start]!==Ao)return!0;return!1}},{key:"includesTrailingLines",get:function(){return!1}},{key:"jsonLike",get:function(){return-1!==[Bo,Ro,Wo,qo].indexOf(this.type)}},{key:"rangeAsLinePos",get:function(){if(this.range&&this.context){var t=Go(this.range.start,this.context.root);if(t)return{start:t,end:Go(this.range.end,this.context.root)}}}},{key:"rawValue",get:function(){if(!this.valueRange||!this.context)return null;var t=this.valueRange,e=t.start,n=t.end;return this.context.src.slice(e,n)}},{key:"tag",get:function(){for(var t=0;t<this.props.length;++t){var e=this.getPropValue(t,No,!1);if(null!=e){if("<"===e[1])return{verbatim:e.slice(2,-1)};var n=yo(e.match(/^(.*!)([^!]*)$/),3);return n[0],{handle:n[1],suffix:n[2]}}}return null}},{key:"valueRangeContainsNewline",get:function(){if(!this.valueRange||!this.context)return!1;for(var t=this.valueRange,e=t.start,n=t.end,r=this.context.src,i=e;i<n;++i)if("\n"===r[i])return!0;return!1}},{key:"parseComment",value:function(e){var n=this.context.src;if(n[e]===Ao){var r=t.endOfLine(n,e+1),i=new Zo(e,r);return this.props.push(i),r}return e}},{key:"setOrigRanges",value:function(t,e){return this.range&&(e=this.range.setOrigRange(t,e)),this.valueRange&&this.valueRange.setOrigRange(t,e),this.props.forEach((function(n){return n.setOrigRange(t,e)})),e}},{key:"toString",value:function(){var e=this.context.src,n=this.range,r=this.value;if(null!=r)return r;var i=e.slice(n.start,n.end);return t.addStringTerminator(e,n.end,i)}}],[{key:"addStringTerminator",value:function(e,n,r){if("\n"===r[r.length-1])return r;var i=t.endOfWhiteSpace(e,n);return i>=e.length||"\n"===e[i]?r+"\n":r}},{key:"atDocumentBoundary",value:function(t,e,n){var r=t[e];if(!r)return!0;var i=t[e-1];if(i&&"\n"!==i)return!1;if(n){if(r!==n)return!1}else if(r!==Io&&r!==Co)return!1;var a=t[e+1],o=t[e+2];if(a!==r||o!==r)return!1;var s=t[e+3];return!s||"\n"===s||"\t"===s||" "===s}},{key:"endOfIdentifier",value:function(t,e){for(var n=t[e],r="<"===n,i=r?["\n","\t"," ",">"]:["\n","\t"," ","[","]","{","}",","];n&&-1===i.indexOf(n);)n=t[e+=1];return r&&">"===n&&(e+=1),e}},{key:"endOfIndent",value:function(t,e){for(var n=t[e];" "===n;)n=t[e+=1];return e}},{key:"endOfLine",value:function(t,e){for(var n=t[e];n&&"\n"!==n;)n=t[e+=1];return e}},{key:"endOfWhiteSpace",value:function(t,e){for(var n=t[e];"\t"===n||" "===n;)n=t[e+=1];return e}},{key:"startOfLine",value:function(t,e){var n=t[e-1];if("\n"===n)return e;for(;n&&"\n"!==n;)n=t[e-=1];return e+1}},{key:"endOfBlockIndent",value:function(e,n,r){var i=t.endOfIndent(e,r);if(i>r+n)return i;var a=t.endOfWhiteSpace(e,i),o=e[a];return o&&"\n"!==o?null:a}},{key:"atBlank",value:function(t,e,n){var r=t[e];return"\n"===r||"\t"===r||" "===r||n&&!r}},{key:"nextNodeIsIndented",value:function(t,e,n){return!(!t||e<0)&&(e>0||n&&"-"===t)}},{key:"normalizeOffset",value:function(e,n){var r=e[n];return r?"\n"!==r&&"\n"===e[n-1]?n-1:t.endOfWhiteSpace(e,n):n}},{key:"foldNewline",value:function(e,n,r){for(var i=0,a=!1,o="",s=e[n+1];" "===s||"\t"===s||"\n"===s;){switch(s){case"\n":i=0,n+=1,o+="\n";break;case"\t":i<=r&&(a=!0),n=t.endOfWhiteSpace(e,n+2)-1;break;case" ":i+=1,n+=1}s=e[n+1]}return o||(o=" "),s&&i<=r&&(a=!0),{fold:o,offset:n,error:a}}}]),t}(),ts=function(t){so(n,ho(Error));var e=vo(n);function n(t,r,i){var a;if(ro(this,n),!(i&&r instanceof Qo))throw new Error("Invalid arguments for new ".concat(t));return(a=e.call(this)).name=t,a.message=i,a.source=r,a}return ao(n,[{key:"makePretty",value:function(){if(this.source){this.nodeType=this.source.type;var t=this.source.context&&this.source.context.root;if("number"==typeof this.offset){this.range=new Zo(this.offset,this.offset+1);var e=t&&Go(this.offset,t);if(e){var n={line:e.line,col:e.col+1};this.linePos={start:e,end:n}}delete this.offset}else this.range=this.source.range,this.linePos=this.source.rangeAsLinePos;if(this.linePos){var r=this.linePos.start,i=r.line,a=r.col;this.message+=" at line ".concat(i,", column ").concat(a);var o=t&&function(t,e){var n=t.start,r=t.end,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:80,a=Ko(n.line,e);if(!a)return null;var o=n.col;if(a.length>i)if(o<=i-10)a=a.substr(0,i-1)+"…";else{var s=Math.round(i/2);a.length>o+s&&(a=a.substr(0,o+s-1)+"…"),o-=a.length-i,a="…"+a.substr(1-i)}var u=1,l="";r&&(r.line===n.line&&o+(r.col-n.col)<=i+1?u=r.col-n.col:(u=Math.min(a.length+1,i)-o,l="…"));var c=o>1?" ".repeat(o-1):"",f="^".repeat(u);return"".concat(a,"\n").concat(c).concat(f).concat(l)}(this.linePos,t);o&&(this.message+=":\n\n".concat(o,"\n"))}delete this.source}}}]),n}(),es=function(t){so(n,ts);var e=vo(n);function n(t,r){return ro(this,n),e.call(this,"YAMLReferenceError",t,r)}return n}(),ns=function(t){so(n,ts);var e=vo(n);function n(t,r){return ro(this,n),e.call(this,"YAMLSemanticError",t,r)}return n}(),rs=function(t){so(n,ts);var e=vo(n);function n(t,r){return ro(this,n),e.call(this,"YAMLSyntaxError",t,r)}return n}(),is=function(t){so(n,ts);var e=vo(n);function n(t,r){return ro(this,n),e.call(this,"YAMLWarning",t,r)}return n}(),as=function(t){so(n,Qo);var e=vo(n);function n(){return ro(this,n),e.apply(this,arguments)}return ao(n,[{key:"strValue",get:function(){if(!this.valueRange||!this.context)return null;for(var t=this.valueRange,e=t.start,n=t.end,r=this.context.src,i=r[n-1];e<n&&("\n"===i||"\t"===i||" "===i);)i=r[--n-1];for(var a="",o=e;o<n;++o){var s=r[o];if("\n"===s){var u=Qo.foldNewline(r,o,-1);a+=u.fold,o=u.offset}else if(" "===s||"\t"===s){for(var l=o,c=r[o+1];o<n&&(" "===c||"\t"===c);)c=r[(o+=1)+1];"\n"!==c&&(a+=o>l?r.slice(l,o+1):s)}else a+=s}var f=r[e];switch(f){case"\t":return{errors:[new ns(this,"Plain value cannot start with a tab character")],str:a};case"@":case"`":var h="Plain value cannot start with reserved character ".concat(f);return{errors:[new ns(this,h)],str:a};default:return a}}},{key:"parseBlockValue",value:function(t){for(var e=this.context,r=e.indent,i=e.inFlow,a=e.src,o=t,s=t,u=a[o];"\n"===u&&!Qo.atDocumentBoundary(a,o+1);u=a[o]){var l=Qo.endOfBlockIndent(a,r,o+1);if(null===l||"#"===a[l])break;o="\n"===a[l]?l:s=n.endOfLine(a,l,i)}return this.valueRange.isEmpty()&&(this.valueRange.start=t),this.valueRange.end=s,s}},{key:"parse",value:function(t,e){this.context=t;var r=t.inFlow,i=t.src,a=e,o=i[a];return o&&"#"!==o&&"\n"!==o&&(a=n.endOfLine(i,e,r)),this.valueRange=new Zo(e,a),a=Qo.endOfWhiteSpace(i,a),a=this.parseComment(a),this.hasComment&&!this.valueRange.isEmpty()||(a=this.parseBlockValue(a)),a}}],[{key:"endOfLine",value:function(t,e,n){for(var r=t[e],i=e;r&&"\n"!==r&&(!n||"["!==r&&"]"!==r&&"{"!==r&&"}"!==r&&","!==r);){var a=t[i+1];if(":"===r&&(!a||"\n"===a||"\t"===a||" "===a||n&&","===a))break;if((" "===r||"\t"===r)&&"#"===a)break;i+=1,r=a}return i}}]),n}(),os=function(t){so(n,Qo);var e=vo(n);function n(){return ro(this,n),e.call(this,Oo)}return ao(n,[{key:"includesTrailingLines",get:function(){return!0}},{key:"parse",value:function(t,e){return this.context=t,this.range=new Zo(e,e+1),e+1}}]),n}(),ss=function(t){so(n,Qo);var e=vo(n);function n(t,r){var i;return ro(this,n),(i=e.call(this,t,r)).node=null,i}return ao(n,[{key:"includesTrailingLines",get:function(){return!!this.node&&this.node.includesTrailingLines}},{key:"parse",value:function(t,e){this.context=t;var n=t.parseNode,r=t.src,i=t.atLineStart,a=t.lineStart;i||this.type!==Ho||(this.error=new ns(this,"Sequence items must not have preceding content on the same line"));for(var o=i?e-a:t.indent,s=Qo.endOfWhiteSpace(r,e+1),u=r[s],l="#"===u,c=[],f=null;"\n"===u||"#"===u;){if("#"===u){var h=Qo.endOfLine(r,s+1);c.push(new Zo(s,h)),s=h}else{i=!0,a=s+1,"\n"===r[Qo.endOfWhiteSpace(r,a)]&&0===c.length&&(a=(f=new os).parse({src:r},a)),s=Qo.endOfIndent(r,a)}u=r[s]}if(Qo.nextNodeIsIndented(u,s-(a+o),this.type!==Ho)?this.node=n({atLineStart:i,inCollection:!1,indent:o,lineStart:a,parent:this},s):u&&a>e+1&&(s=a-1),this.node){if(f){var d=t.parent.items||t.parent.contents;d&&d.push(f)}c.length&&Array.prototype.push.apply(this.props,c),s=this.node.range.end}else if(l){var g=c[0];this.props.push(g),s=g.end}else s=Qo.endOfLine(r,e+1);var p=this.node?this.node.valueRange.end:s;return this.valueRange=new Zo(e,p),s}},{key:"setOrigRanges",value:function(t,e){return e=mo(uo(n.prototype),"setOrigRanges",this).call(this,t,e),this.node?this.node.setOrigRanges(t,e):e}},{key:"toString",value:function(){var t=this.context.src,e=this.node,n=this.range,r=this.value;if(null!=r)return r;var i=e?t.slice(n.start,e.range.start)+String(e):t.slice(n.start,n.end);return Qo.addStringTerminator(t,n.end,i)}}]),n}(),us=function(t){so(n,Qo);var e=vo(n);function n(){return ro(this,n),e.call(this,Lo)}return ao(n,[{key:"parse",value:function(t,e){this.context=t;var n=this.parseComment(e);return this.range=new Zo(e,n),n}}]),n}();function ls(t){for(var e=t;e instanceof ss;)e=e.node;if(!(e instanceof cs))return null;for(var n=e.items.length,r=-1,i=n-1;i>=0;--i){var a=e.items[i];if(a.type===Lo){var o=a.context,s=o.indent,u=o.lineStart;if(s>0&&a.range.start>=u+s)break;r=i}else{if(a.type!==Oo)break;r=i}}if(-1===r)return null;for(var l=e.items.splice(r,n-r),c=l[0].range.start;e.range.end=c,e.valueRange&&e.valueRange.end>c&&(e.valueRange.end=c),e!==t;)e=e.context.parent;return l}var cs=function(t){so(n,Qo);var e=vo(n);function n(t){var r;ro(this,n),r=e.call(this,t.type===Ho?$o:jo);for(var i=t.props.length-1;i>=0;--i)if(t.props[i].start<t.context.lineStart){r.props=t.props.slice(0,i+1),t.props=t.props.slice(i+1);var a=t.props[0]||t.valueRange;t.range.start=a.start;break}r.items=[t];var o=ls(t);return o&&Array.prototype.push.apply(r.items,o),r}return ao(n,[{key:"includesTrailingLines",get:function(){return this.items.length>0}},{key:"parse",value:function(t,e){this.context=t;var r=t.parseNode,i=t.src,a=Qo.startOfLine(i,e),o=this.items[0];o.context.parent=this,this.valueRange=Zo.copy(o.valueRange);for(var s=o.range.start-o.context.lineStart,u=e,l=i[u=Qo.normalizeOffset(i,u)],c=Qo.endOfWhiteSpace(i,a)===u,f=!1;l;){for(;"\n"===l||"#"===l;){if(c&&"\n"===l&&!f){var h=new os;if(u=h.parse({src:i},u),this.valueRange.end=u,u>=i.length){l=null;break}this.items.push(h),u-=1}else if("#"===l){if(u<a+s&&!n.nextContentHasIndent(i,u,s))return u;var d=new us;if(u=d.parse({indent:s,lineStart:a,src:i},u),this.items.push(d),this.valueRange.end=u,u>=i.length){l=null;break}}if(a=u+1,u=Qo.endOfIndent(i,a),Qo.atBlank(i,u)){var g=Qo.endOfWhiteSpace(i,u),p=i[g];p&&"\n"!==p&&"#"!==p||(u=g)}l=i[u],c=!0}if(!l)break;if(u!==a+s&&(c||":"!==l)){if(u<a+s){a>e&&(u=a);break}if(!this.error){this.error=new rs(this,"All collection items must start at the same column")}}if(o.type===Ho){if("-"!==l){a>e&&(u=a);break}}else if("-"===l&&!this.error){var v=i[u+1];if(!v||"\n"===v||"\t"===v||" "===v){this.error=new rs(this,"A collection cannot be both a mapping and a sequence")}}var m=r({atLineStart:c,inCollection:!0,indent:s,lineStart:a,parent:this},u);if(!m)return u;if(this.items.push(m),this.valueRange.end=m.valueRange.end,l=i[u=Qo.normalizeOffset(i,m.range.end)],c=!1,f=m.includesTrailingLines,l){for(var y=u-1,w=i[y];" "===w||"\t"===w;)w=i[--y];"\n"===w&&(a=y+1,c=!0)}var b=ls(m);b&&Array.prototype.push.apply(this.items,b)}return u}},{key:"setOrigRanges",value:function(t,e){return e=mo(uo(n.prototype),"setOrigRanges",this).call(this,t,e),this.items.forEach((function(n){e=n.setOrigRanges(t,e)})),e}},{key:"toString",value:function(){var t=this.context.src,e=this.items,n=this.range,r=this.value;if(null!=r)return r;for(var i=t.slice(n.start,e[0].range.start)+String(e[0]),a=1;a<e.length;++a){var o=e[a],s=o.context,u=s.atLineStart,l=s.indent;if(u)for(var c=0;c<l;++c)i+=" ";i+=String(o)}return Qo.addStringTerminator(t,n.end,i)}}],[{key:"nextContentHasIndent",value:function(t,e,r){var i=Qo.endOfLine(t,e)+1,a=t[e=Qo.endOfWhiteSpace(t,i)];return!!a&&(e>=i+r||("#"===a||"\n"===a)&&n.nextContentHasIndent(t,e,r))}}]),n}(),fs=function(t){so(n,Qo);var e=vo(n);function n(){var t;return ro(this,n),(t=e.call(this,Fo)).name=null,t}return ao(n,[{key:"parameters",get:function(){var t=this.rawValue;return t?t.trim().split(/[ \t]+/):[]}},{key:"parseName",value:function(t){for(var e=this.context.src,n=t,r=e[n];r&&"\n"!==r&&"\t"!==r&&" "!==r;)r=e[n+=1];return this.name=e.slice(t,n),n}},{key:"parseParameters",value:function(t){for(var e=this.context.src,n=t,r=e[n];r&&"\n"!==r&&"#"!==r;)r=e[n+=1];return this.valueRange=new Zo(t,n),n}},{key:"parse",value:function(t,e){this.context=t;var n=this.parseName(e+1);return n=this.parseParameters(n),n=this.parseComment(n),this.range=new Zo(e,n),n}}]),n}(),hs=function(t){so(n,Qo);var e=vo(n);function n(){var t;return ro(this,n),(t=e.call(this,Po)).directives=null,t.contents=null,t.directivesEndMarker=null,t.documentEndMarker=null,t}return ao(n,[{key:"parseDirectives",value:function(t){var e=this.context.src;this.directives=[];for(var r=!0,i=!1,a=t;!Qo.atDocumentBoundary(e,a,Io);)switch(e[a=n.startCommentOrEndBlankLine(e,a)]){case"\n":if(r){var o=new os;(a=o.parse({src:e},a))<e.length&&this.directives.push(o)}else a+=1,r=!0;break;case"#":var s=new us;a=s.parse({src:e},a),this.directives.push(s),r=!1;break;case"%":var u=new fs;a=u.parse({parent:this,src:e},a),this.directives.push(u),i=!0,r=!1;break;default:return i?this.error=new ns(this,"Missing directives-end indicator line"):this.directives.length>0&&(this.contents=this.directives,this.directives=[]),a}return e[a]?(this.directivesEndMarker=new Zo(a,a+3),a+3):(i?this.error=new ns(this,"Missing directives-end indicator line"):this.directives.length>0&&(this.contents=this.directives,this.directives=[]),a)}},{key:"parseContents",value:function(t){var e=this.context,r=e.parseNode,i=e.src;this.contents||(this.contents=[]);for(var a=t;"-"===i[a-1];)a-=1;var o=Qo.endOfWhiteSpace(i,t),s=a===t;for(this.valueRange=new Zo(o);!Qo.atDocumentBoundary(i,o,Co);){switch(i[o]){case"\n":if(s){var u=new os;(o=u.parse({src:i},o))<i.length&&this.contents.push(u)}else o+=1,s=!0;a=o;break;case"#":var l=new us;o=l.parse({src:i},o),this.contents.push(l),s=!1;break;default:var c=Qo.endOfIndent(i,o),f=r({atLineStart:s,indent:-1,inFlow:!1,inCollection:!1,lineStart:a,parent:this},c);if(!f)return this.valueRange.end=c;this.contents.push(f),o=f.range.end,s=!1;var h=ls(f);h&&Array.prototype.push.apply(this.contents,h)}o=n.startCommentOrEndBlankLine(i,o)}if(this.valueRange.end=o,i[o]&&(this.documentEndMarker=new Zo(o,o+3),i[o+=3])){if("#"===i[o=Qo.endOfWhiteSpace(i,o)]){var d=new us;o=d.parse({src:i},o),this.contents.push(d)}switch(i[o]){case"\n":o+=1;break;case void 0:break;default:this.error=new rs(this,"Document end marker line cannot have a non-comment suffix")}}return o}},{key:"parse",value:function(t,e){t.root=this,this.context=t;var n=65279===t.src.charCodeAt(e)?e+1:e;return n=this.parseDirectives(n),n=this.parseContents(n)}},{key:"setOrigRanges",value:function(t,e){return e=mo(uo(n.prototype),"setOrigRanges",this).call(this,t,e),this.directives.forEach((function(n){e=n.setOrigRanges(t,e)})),this.directivesEndMarker&&(e=this.directivesEndMarker.setOrigRange(t,e)),this.contents.forEach((function(n){e=n.setOrigRanges(t,e)})),this.documentEndMarker&&(e=this.documentEndMarker.setOrigRange(t,e)),e}},{key:"toString",value:function(){var t=this.contents,e=this.directives,n=this.value;if(null!=n)return n;var r=e.join("");return t.length>0&&((e.length>0||t[0].type===Lo)&&(r+="---\n"),r+=t.join("")),"\n"!==r[r.length-1]&&(r+="\n"),r}}],[{key:"startCommentOrEndBlankLine",value:function(t,e){var n=Qo.endOfWhiteSpace(t,e),r=t[n];return"#"===r||"\n"===r?n:e}}]),n}(),ds=function(t){so(n,Qo);var e=vo(n);function n(){return ro(this,n),e.apply(this,arguments)}return ao(n,[{key:"parse",value:function(t,e){this.context=t;var n=t.src,r=Qo.endOfIdentifier(n,e+1);return this.valueRange=new Zo(e+1,r),r=Qo.endOfWhiteSpace(n,r),r=this.parseComment(r)}}]),n}(),gs="CLIP",ps="KEEP",vs="STRIP",ms=function(t){so(n,Qo);var e=vo(n);function n(t,r){var i;return ro(this,n),(i=e.call(this,t,r)).blockIndent=null,i.chomping=gs,i.header=null,i}return ao(n,[{key:"includesTrailingLines",get:function(){return this.chomping===ps}},{key:"strValue",get:function(){if(!this.valueRange||!this.context)return null;var t=this.valueRange,e=t.start,n=t.end,r=this.context,i=r.indent,a=r.src;if(this.valueRange.isEmpty())return"";for(var o=null,s=a[n-1];"\n"===s||"\t"===s||" "===s;){if((n-=1)<=e){if(this.chomping===ps)break;return""}"\n"===s&&(o=n),s=a[n-1]}var u=n+1;o&&(this.chomping===ps?(u=o,n=this.valueRange.end):n=o);for(var l=i+this.blockIndent,c=this.type===Do,f=!0,h="",d="",g=!1,p=e;p<n;++p){for(var v=0;v<l&&" "===a[p];++v)p+=1;var m=a[p];if("\n"===m)"\n"===d?h+="\n":d="\n";else{var y=Qo.endOfLine(a,p),w=a.slice(p,y);p=y,c&&(" "===m||"\t"===m)&&p<u?(" "===d?d="\n":g||f||"\n"!==d||(d="\n\n"),h+=d+w,d=y<n&&a[y]||"",g=!0):(h+=d+w,d=c&&p<u?" ":"\n",g=!1),f&&""!==w&&(f=!1)}}return this.chomping===vs?h:h+"\n"}},{key:"parseBlockHeader",value:function(t){for(var e=this.context.src,n=t+1,r="";;){var i=e[n];switch(i){case"-":this.chomping=vs;break;case"+":this.chomping=ps;break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":r+=i;break;default:return this.blockIndent=Number(r)||null,this.header=new Zo(t,n),n}n+=1}}},{key:"parseBlockValue",value:function(t){for(var e=this.context,n=e.indent,r=e.src,i=!!this.blockIndent,a=t,o=t,s=1,u=r[a];"\n"===u&&(a+=1,!Qo.atDocumentBoundary(r,a));u=r[a]){var l=Qo.endOfBlockIndent(r,n,a);if(null===l)break;var c=r[l],f=l-(a+n);if(this.blockIndent){if(c&&"\n"!==c&&f<this.blockIndent){if("#"===r[l])break;if(!this.error){var h="Block scalars must not be less indented than their ".concat(i?"explicit indentation indicator":"first line");this.error=new ns(this,h)}}}else if("\n"!==r[l]){if(f<s){this.error=new ns(this,"Block scalars with more-indented leading empty lines must use an explicit indentation indicator")}this.blockIndent=f}else f>s&&(s=f);a="\n"===r[l]?l:o=Qo.endOfLine(r,l)}return this.chomping!==ps&&(a=r[o]?o+1:o),this.valueRange=new Zo(t+1,a),a}},{key:"parse",value:function(t,e){this.context=t;var n=t.src,r=this.parseBlockHeader(e);return r=Qo.endOfWhiteSpace(n,r),r=this.parseComment(r),r=this.parseBlockValue(r)}},{key:"setOrigRanges",value:function(t,e){return e=mo(uo(n.prototype),"setOrigRanges",this).call(this,t,e),this.header?this.header.setOrigRange(t,e):e}}]),n}(),ys=function(t){so(n,Qo);var e=vo(n);function n(t,r){var i;return ro(this,n),(i=e.call(this,t,r)).items=null,i}return ao(n,[{key:"prevNodeIsJsonLike",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.items.length,e=this.items[t-1];return!!e&&(e.jsonLike||e.type===Lo&&this.prevNodeIsJsonLike(t-1))}},{key:"parse",value:function(t,e){this.context=t;var n=t.parseNode,r=t.src,i=t.indent,a=t.lineStart,o=r[e];this.items=[{char:o,offset:e}];var s=Qo.endOfWhiteSpace(r,e+1);for(o=r[s];o&&"]"!==o&&"}"!==o;){switch(o){case"\n":if(a=s+1,"\n"===r[Qo.endOfWhiteSpace(r,a)]){var u=new os;a=u.parse({src:r},a),this.items.push(u)}if((s=Qo.endOfIndent(r,a))<=a+i&&(o=r[s],s<a+i||"]"!==o&&"}"!==o)){this.error=new ns(this,"Insufficient indentation in flow collection")}break;case",":this.items.push({char:o,offset:s}),s+=1;break;case"#":var l=new us;s=l.parse({src:r},s),this.items.push(l);break;case"?":case":":var c=r[s+1];if("\n"===c||"\t"===c||" "===c||","===c||":"===o&&this.prevNodeIsJsonLike()){this.items.push({char:o,offset:s}),s+=1;break}default:var f=n({atLineStart:!1,inCollection:!1,inFlow:!0,indent:-1,lineStart:a,parent:this},s);if(!f)return this.valueRange=new Zo(e,s),s;this.items.push(f),s=Qo.normalizeOffset(r,f.range.end)}o=r[s=Qo.endOfWhiteSpace(r,s)]}return this.valueRange=new Zo(e,s+1),o&&(this.items.push({char:o,offset:s}),s=Qo.endOfWhiteSpace(r,s+1),s=this.parseComment(s)),s}},{key:"setOrigRanges",value:function(t,e){return e=mo(uo(n.prototype),"setOrigRanges",this).call(this,t,e),this.items.forEach((function(n){if(n instanceof Qo)e=n.setOrigRanges(t,e);else if(0===t.length)n.origOffset=n.offset;else{for(var r=e;r<t.length&&!(t[r]>n.offset);)++r;n.origOffset=n.offset+r,e=r}})),e}},{key:"toString",value:function(){var t=this.context.src,e=this.items,n=this.range,r=this.value;if(null!=r)return r;var i=e.filter((function(t){return t instanceof Qo})),a="",o=n.start;return i.forEach((function(e){var n=t.slice(o,e.range.start);o=e.range.end,"\n"===(a+=n+String(e))[a.length-1]&&"\n"!==t[o-1]&&"\n"===t[o]&&(o+=1)})),a+=t.slice(o,n.end),Qo.addStringTerminator(t,n.end,a)}}]),n}(),ws=function(t){so(n,Qo);var e=vo(n);function n(){return ro(this,n),e.apply(this,arguments)}return ao(n,[{key:"strValue",get:function(){if(!this.valueRange||!this.context)return null;var t=[],e=this.valueRange,n=e.start,r=e.end,i=this.context,a=i.indent,o=i.src;'"'!==o[r-1]&&t.push(new rs(this,'Missing closing "quote'));for(var s="",u=n+1;u<r-1;++u){var l=o[u];if("\n"===l){Qo.atDocumentBoundary(o,u+1)&&t.push(new ns(this,"Document boundary indicators are not allowed within string values"));var c=Qo.foldNewline(o,u,a);s+=c.fold,u=c.offset,c.error&&t.push(new ns(this,"Multi-line double-quoted string needs to be sufficiently indented"))}else if("\\"===l)switch(o[u+=1]){case"0":s+="\0";break;case"a":s+="";break;case"b":s+="\b";break;case"e":s+="";break;case"f":s+="\f";break;case"n":s+="\n";break;case"r":s+="\r";break;case"t":s+="\t";break;case"v":s+="\v";break;case"N":s+="";break;case"_":s+=" ";break;case"L":s+="\u2028";break;case"P":s+="\u2029";break;case" ":s+=" ";break;case'"':s+='"';break;case"/":s+="/";break;case"\\":s+="\\";break;case"\t":s+="\t";break;case"x":s+=this.parseCharCode(u+1,2,t),u+=2;break;case"u":s+=this.parseCharCode(u+1,4,t),u+=4;break;case"U":s+=this.parseCharCode(u+1,8,t),u+=8;break;case"\n":for(;" "===o[u+1]||"\t"===o[u+1];)u+=1;break;default:t.push(new rs(this,"Invalid escape sequence ".concat(o.substr(u-1,2)))),s+="\\"+o[u]}else if(" "===l||"\t"===l){for(var f=u,h=o[u+1];" "===h||"\t"===h;)h=o[(u+=1)+1];"\n"!==h&&(s+=u>f?o.slice(f,u+1):l)}else s+=l}return t.length>0?{errors:t,str:s}:s}},{key:"parseCharCode",value:function(t,e,n){var r=this.context.src,i=r.substr(t,e),a=i.length===e&&/^[0-9a-fA-F]+$/.test(i)?parseInt(i,16):NaN;return isNaN(a)?(n.push(new rs(this,"Invalid escape sequence ".concat(r.substr(t-2,e+2)))),r.substr(t-2,e+2)):String.fromCodePoint(a)}},{key:"parse",value:function(t,e){this.context=t;var r=t.src,i=n.endOfQuote(r,e+1);return this.valueRange=new Zo(e,i),i=Qo.endOfWhiteSpace(r,i),i=this.parseComment(i)}}],[{key:"endOfQuote",value:function(t,e){for(var n=t[e];n&&'"'!==n;)n=t[e+="\\"===n?2:1];return e+1}}]),n}(),bs=function(t){so(n,Qo);var e=vo(n);function n(){return ro(this,n),e.apply(this,arguments)}return ao(n,[{key:"strValue",get:function(){if(!this.valueRange||!this.context)return null;var t=[],e=this.valueRange,n=e.start,r=e.end,i=this.context,a=i.indent,o=i.src;"'"!==o[r-1]&&t.push(new rs(this,"Missing closing 'quote"));for(var s="",u=n+1;u<r-1;++u){var l=o[u];if("\n"===l){Qo.atDocumentBoundary(o,u+1)&&t.push(new ns(this,"Document boundary indicators are not allowed within string values"));var c=Qo.foldNewline(o,u,a);s+=c.fold,u=c.offset,c.error&&t.push(new ns(this,"Multi-line single-quoted string needs to be sufficiently indented"))}else if("'"===l)s+=l,"'"!==o[u+=1]&&t.push(new rs(this,"Unescaped single quote? This should not happen."));else if(" "===l||"\t"===l){for(var f=u,h=o[u+1];" "===h||"\t"===h;)h=o[(u+=1)+1];"\n"!==h&&(s+=u>f?o.slice(f,u+1):l)}else s+=l}return t.length>0?{errors:t,str:s}:s}},{key:"parse",value:function(t,e){this.context=t;var r=t.src,i=n.endOfQuote(r,e+1);return this.valueRange=new Zo(e,i),i=Qo.endOfWhiteSpace(r,i),i=this.parseComment(i)}}],[{key:"endOfQuote",value:function(t,e){for(var n=t[e];n;)if("'"===n){if("'"!==t[e+1])break;n=t[e+=2]}else n=t[e+=1];return e+1}}]),n}();function xs(t,e){switch(t){case To:return new ds(t,e);case Do:case Eo:return new ms(t,e);case Bo:case Ro:return new ys(t,e);case Yo:case Uo:case Ho:return new ss(t,e);case Lo:case Vo:return new as(t,e);case Wo:return new ws(t,e);case qo:return new bs(t,e);default:return null}}var ks=function(){function t(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=r.atLineStart,a=r.inCollection,o=r.inFlow,s=r.indent,u=r.lineStart,l=r.parent;ro(this,t),oo(this,"parseNode",(function(n,r){if(Qo.atDocumentBoundary(e.src,r))return null;var i=new t(e,n),a=i.parseProps(r),o=a.props,s=a.type,u=a.valueStart,l=xs(s,o),c=l.parse(i,u);if(l.range=new Zo(r,c),c<=r&&(l.error=new Error("Node#parse consumed no characters"),l.error.parseEnd=c,l.error.source=l,l.range.end=r+1),i.nodeStartsCollection(l)){l.error||i.atLineStart||i.parent.type!==Po||(l.error=new rs(l,"Block collection must not have preceding content here (e.g. directives-end indicator)"));var f=new cs(l);return c=f.parse(new t(i),c),f.range=new Zo(r,c),f}return l})),this.atLineStart=null!=i?i:n.atLineStart||!1,this.inCollection=null!=a?a:n.inCollection||!1,this.inFlow=null!=o?o:n.inFlow||!1,this.indent=null!=s?s:n.indent,this.lineStart=null!=u?u:n.lineStart,this.parent=null!=l?l:n.parent||{},this.root=n.root,this.src=n.src}return ao(t,[{key:"nodeStartsCollection",value:function(t){var e=this.inCollection,n=this.inFlow,r=this.src;if(e||n)return!1;if(t instanceof ss)return!0;var i=t.range.end;return"\n"!==r[i]&&"\n"!==r[i-1]&&":"===r[i=Qo.endOfWhiteSpace(r,i)]}},{key:"parseProps",value:function(e){for(var n=this.inFlow,r=this.parent,i=this.src,a=[],o=!1,s=i[e=this.atLineStart?Qo.endOfIndent(i,e):Qo.endOfWhiteSpace(i,e)];s===So||s===Ao||s===No||"\n"===s;){if("\n"===s){var u=e,l=void 0;do{l=u+1,u=Qo.endOfIndent(i,l)}while("\n"===i[u]);var c=u-(l+this.indent),f=r.type===Ho&&r.context.atLineStart;if("#"!==i[u]&&!Qo.nextNodeIsIndented(i[u],c,!f))break;this.atLineStart=!0,this.lineStart=l,o=!1,e=u}else if(s===Ao){var h=Qo.endOfLine(i,e+1);a.push(new Zo(e,h)),e=h}else{var d=Qo.endOfIdentifier(i,e+1);s===No&&","===i[d]&&/^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+,\d\d\d\d(-\d\d){0,2}\/\S/.test(i.slice(e+1,d+13))&&(d=Qo.endOfIdentifier(i,d+5)),a.push(new Zo(e,d)),o=!0,e=Qo.endOfWhiteSpace(i,d)}s=i[e]}return o&&":"===s&&Qo.atBlank(i,e+1,!0)&&(e-=1),{props:a,type:t.parseType(i,e,n),valueStart:e}}}],[{key:"parseType",value:function(t,e,n){switch(t[e]){case"*":return To;case">":return Do;case"|":return Eo;case"{":return Bo;case"[":return Ro;case"?":return!n&&Qo.atBlank(t,e+1,!0)?Yo:Vo;case":":return!n&&Qo.atBlank(t,e+1,!0)?Uo:Vo;case"-":return!n&&Qo.atBlank(t,e+1,!0)?Ho:Vo;case'"':return Wo;case"'":return qo;default:return Vo}}}]),t}();function _s(t){var e=[];-1!==t.indexOf("\r")&&(t=t.replace(/\r\n?/g,(function(t,n){return t.length>1&&e.push(n),"\n"})));var n=[],r=0;do{var i=new hs,a=new ks({src:t});r=i.parse(a,r),n.push(i)}while(r<t.length);return n.setOrigRanges=function(){if(0===e.length)return!1;for(var t=1;t<e.length;++t)e[t]-=t;for(var r=0,i=0;i<n.length;++i)r=n[i].setOrigRanges(e,r);return e.splice(0,e.length),!0},n.toString=function(){return n.join("...\n")},n}function Ms(t,e,n){return n?-1===n.indexOf("\n")?"".concat(t," #").concat(n):"".concat(t,"\n")+n.replace(/^/gm,"".concat(e||"","#")):t}var Ss=function t(){ro(this,t)};function As(t,e,n){if(Array.isArray(t))return t.map((function(t,e){return As(t,String(e),n)}));if(t&&"function"==typeof t.toJSON){var r=n&&n.anchors&&n.anchors.get(t);r&&(n.onCreate=function(t){r.res=t,delete n.onCreate});var i=t.toJSON(e,n);return r&&n.onCreate&&n.onCreate(i),i}return n&&n.keep||"bigint"!=typeof t?t:Number(t)}var Ns=function(t){so(n,Ss);var e=vo(n);function n(t){var r;return ro(this,n),(r=e.call(this)).value=t,r}return ao(n,[{key:"toJSON",value:function(t,e){return e&&e.keep?this.value:As(this.value,t,e)}},{key:"toString",value:function(){return String(this.value)}}]),n}();function Is(t,e,n){for(var r=n,i=e.length-1;i>=0;--i){var a=e[i];if(Number.isInteger(a)&&a>=0){var o=[];o[a]=r,r=o}else{var s={};Object.defineProperty(s,a,{value:r,writable:!0,enumerable:!0,configurable:!0}),r=s}}return t.createNode(r,!1)}var Cs=function(t){return null==t||"object"===no(t)&&t[Symbol.iterator]().next().done},Ts=function(t){so(n,Ss);var e=vo(n);function n(t){var r;return ro(this,n),oo(go(r=e.call(this)),"items",[]),r.schema=t,r}return ao(n,[{key:"addIn",value:function(t,e){if(Cs(t))this.add(e);else{var r=wo(t),i=r[0],a=r.slice(1),o=this.get(i,!0);if(o instanceof n)o.addIn(a,e);else{if(void 0!==o||!this.schema)throw new Error("Expected YAML collection at ".concat(i,". Remaining path: ").concat(a));this.set(i,Is(this.schema,a,e))}}}},{key:"deleteIn",value:function(t){var e=wo(t),r=e[0],i=e.slice(1);if(0===i.length)return this.delete(r);var a=this.get(r,!0);if(a instanceof n)return a.deleteIn(i);throw new Error("Expected YAML collection at ".concat(r,". Remaining path: ").concat(i))}},{key:"getIn",value:function(t,e){var r=wo(t),i=r[0],a=r.slice(1),o=this.get(i,!0);return 0===a.length?!e&&o instanceof Ns?o.value:o:o instanceof n?o.getIn(a,e):void 0}},{key:"hasAllNullValues",value:function(){return this.items.every((function(t){if(!t||"PAIR"!==t.type)return!1;var e=t.value;return null==e||e instanceof Ns&&null==e.value&&!e.commentBefore&&!e.comment&&!e.tag}))}},{key:"hasIn",value:function(t){var e=wo(t),r=e[0],i=e.slice(1);if(0===i.length)return this.has(r);var a=this.get(r,!0);return a instanceof n&&a.hasIn(i)}},{key:"setIn",value:function(t,e){var r=wo(t),i=r[0],a=r.slice(1);if(0===a.length)this.set(i,e);else{var o=this.get(i,!0);if(o instanceof n)o.setIn(a,e);else{if(void 0!==o||!this.schema)throw new Error("Expected YAML collection at ".concat(i,". Remaining path: ").concat(a));this.set(i,Is(this.schema,a,e))}}}},{key:"toJSON",value:function(){return null}},{key:"toString",value:function(t,e,r,i){var a=this,o=e.blockItem,s=e.flowChars,u=e.isMap,l=e.itemIndent,c=t,f=c.indent,h=c.indentStep,d=c.stringify,g=this.type===Bo||this.type===Ro||t.inFlow;g&&(l+=h);var p=u&&this.hasAllNullValues();t=Object.assign({},t,{allNullValues:p,indent:l,inFlow:g,type:null});var v,m=!1,y=!1,w=this.items.reduce((function(e,n,r){var i;n&&(!m&&n.spaceBefore&&e.push({type:"comment",str:""}),n.commentBefore&&n.commentBefore.match(/^.*$/gm).forEach((function(t){e.push({type:"comment",str:"#".concat(t)})})),n.comment&&(i=n.comment),g&&(!m&&n.spaceBefore||n.commentBefore||n.comment||n.key&&(n.key.commentBefore||n.key.comment)||n.value&&(n.value.commentBefore||n.value.comment))&&(y=!0)),m=!1;var o=d(n,t,(function(){return i=null}),(function(){return m=!0}));return g&&!y&&o.includes("\n")&&(y=!0),g&&r<a.items.length-1&&(o+=","),o=Ms(o,l,i),m&&(i||g)&&(m=!1),e.push({type:"item",str:o}),e}),[]);if(0===w.length)v=s.start+s.end;else if(g){var b=s.start,x=s.end,k=w.map((function(t){return t.str}));if(y||k.reduce((function(t,e){return t+e.length+2}),2)>n.maxFlowStringSingleLineLength){v=b;var _,M=Mo(k);try{for(M.s();!(_=M.n()).done;){var S=_.value;v+=S?"\n".concat(h).concat(f).concat(S):"\n"}}catch(t){M.e(t)}finally{M.f()}v+="\n".concat(f).concat(x)}else v="".concat(b," ").concat(k.join(" ")," ").concat(x)}else{var A=w.map(o);v=A.shift();var N,I=Mo(A);try{for(I.s();!(N=I.n()).done;){var C=N.value;v+=C?"\n".concat(f).concat(C):"\n"}}catch(t){I.e(t)}finally{I.f()}}return this.comment?(v+="\n"+this.comment.replace(/^/gm,"".concat(f,"#")),r&&r()):m&&i&&i(),v}}]),n}();function Os(t){var e=t instanceof Ns?t.value:t;return e&&"string"==typeof e&&(e=Number(e)),Number.isInteger(e)&&e>=0?e:null}oo(Ts,"maxFlowStringSingleLineLength",60);var Ds=function(t){so(n,Ts);var e=vo(n);function n(){return ro(this,n),e.apply(this,arguments)}return ao(n,[{key:"add",value:function(t){this.items.push(t)}},{key:"delete",value:function(t){var e=Os(t);return"number"==typeof e&&this.items.splice(e,1).length>0}},{key:"get",value:function(t,e){var n=Os(t);if("number"==typeof n){var r=this.items[n];return!e&&r instanceof Ns?r.value:r}}},{key:"has",value:function(t){var e=Os(t);return"number"==typeof e&&e<this.items.length}},{key:"set",value:function(t,e){var n=Os(t);if("number"!=typeof n)throw new Error("Expected a valid index, not ".concat(t,"."));this.items[n]=e}},{key:"toJSON",value:function(t,e){var n=[];e&&e.onCreate&&e.onCreate(n);var r,i=0,a=Mo(this.items);try{for(a.s();!(r=a.n()).done;){var o=r.value;n.push(As(o,String(i++),e))}}catch(t){a.e(t)}finally{a.f()}return n}},{key:"toString",value:function(t,e,r){return t?mo(uo(n.prototype),"toString",this).call(this,t,{blockItem:function(t){return"comment"===t.type?t.str:"- ".concat(t.str)},flowChars:{start:"[",end:"]"},isMap:!1,itemIndent:(t.indent||"")+"  "},e,r):JSON.stringify(this)}}]),n}(),Es=function(t){so(n,Ss);var e=vo(n);function n(t){var r,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return ro(this,n),(r=e.call(this)).key=t,r.value=i,r.type=n.Type.PAIR,r}return ao(n,[{key:"commentBefore",get:function(){return this.key instanceof Ss?this.key.commentBefore:void 0},set:function(t){if(null==this.key&&(this.key=new Ns(null)),!(this.key instanceof Ss)){throw new Error("Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node.")}this.key.commentBefore=t}},{key:"addToJSMap",value:function(t,e){var n=As(this.key,"",t);if(e instanceof Map){var r=As(this.value,n,t);e.set(n,r)}else if(e instanceof Set)e.add(n);else{var i=function(t,e,n){return null===e?"":"object"!==no(e)?String(e):t instanceof Ss&&n&&n.doc?t.toString({anchors:Object.create(null),doc:n.doc,indent:"",indentStep:n.indentStep,inFlow:!0,inStringifyKey:!0,stringify:n.stringify}):JSON.stringify(e)}(this.key,n,t),a=As(this.value,i,t);i in e?Object.defineProperty(e,i,{value:a,writable:!0,enumerable:!0,configurable:!0}):e[i]=a}return e}},{key:"toJSON",value:function(t,e){var n=e&&e.mapAsMap?new Map:{};return this.addToJSMap(e,n)}},{key:"toString",value:function(t,e,n){if(!t||!t.doc)return JSON.stringify(this);var r=t.doc.options,i=r.indent,a=r.indentSeq,o=r.simpleKeys,s=this.key,u=this.value,l=s instanceof Ss&&s.comment;if(o){if(l)throw new Error("With simple keys, key nodes cannot have comments");if(s instanceof Ts){throw new Error("With simple keys, collection cannot be used as a key value")}}var c=!o&&(!s||l||(s instanceof Ss?s instanceof Ts||s.type===Do||s.type===Eo:"object"===no(s))),f=t,h=f.doc,d=f.indent,g=f.indentStep,p=f.stringify;t=Object.assign({},t,{implicitKey:!c,indent:d+g});var v=!1,m=p(s,t,(function(){return l=null}),(function(){return v=!0}));if(m=Ms(m,t.indent,l),!c&&m.length>1024){if(o)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");c=!0}if(t.allNullValues&&!o)return this.comment?(m=Ms(m,t.indent,this.comment),e&&e()):v&&!l&&n&&n(),t.inFlow&&!c?m:"? ".concat(m);m=c?"? ".concat(m,"\n").concat(d,":"):"".concat(m,":"),this.comment&&(m=Ms(m,t.indent,this.comment),e&&e());var y="",w=null;if(u instanceof Ss){if(u.spaceBefore&&(y="\n"),u.commentBefore){var b=u.commentBefore.replace(/^/gm,"".concat(t.indent,"#"));y+="\n".concat(b)}w=u.comment}else u&&"object"===no(u)&&(u=h.schema.createNode(u,!0));t.implicitKey=!1,!c&&!this.comment&&u instanceof Ns&&(t.indentAtStart=m.length+1),v=!1,!a&&i>=2&&!t.inFlow&&!c&&u instanceof Ds&&u.type!==Ro&&!u.tag&&!h.anchors.getName(u)&&(t.indent=t.indent.substr(2));var x=p(u,t,(function(){return w=null}),(function(){return v=!0})),k=" ";if(y||this.comment)k="".concat(y,"\n").concat(t.indent);else if(!c&&u instanceof Ts){("["===x[0]||"{"===x[0])&&!x.includes("\n")||(k="\n".concat(t.indent))}else"\n"===x[0]&&(k="");return v&&!w&&n&&n(),Ms(m+k+x,t.indent,w)}}]),n}();oo(Es,"Type",{PAIR:"PAIR",MERGE_PAIR:"MERGE_PAIR"});var Ls=function t(e,n){if(e instanceof Fs){var r=n.get(e.source);return r.count*r.aliasCount}if(e instanceof Ts){var i,a=0,o=Mo(e.items);try{for(o.s();!(i=o.n()).done;){var s=t(i.value,n);s>a&&(a=s)}}catch(t){o.e(t)}finally{o.f()}return a}if(e instanceof Es){var u=t(e.key,n),l=t(e.value,n);return Math.max(u,l)}return 1},Fs=function(t){so(n,Ss);var e=vo(n);function n(t){var r;return ro(this,n),(r=e.call(this)).source=t,r.type=To,r}return ao(n,[{key:"tag",set:function(t){throw new Error("Alias nodes cannot have tags")}},{key:"toJSON",value:function(t,e){if(!e)return As(this.source,t,e);var n=e.anchors,r=e.maxAliasCount,i=n.get(this.source);if(!i||void 0===i.res){var a="This should not happen: Alias anchor was not resolved?";throw this.cstNode?new es(this.cstNode,a):new ReferenceError(a)}if(r>=0&&(i.count+=1,0===i.aliasCount&&(i.aliasCount=Ls(this.source,n)),i.count*i.aliasCount>r)){var o="Excessive alias count indicates a resource exhaustion attack";throw this.cstNode?new es(this.cstNode,o):new ReferenceError(o)}return i.res}},{key:"toString",value:function(t){return n.stringify(this,t)}}],[{key:"stringify",value:function(t,e){var n=t.range,r=t.source,i=e.anchors,a=e.doc,o=e.implicitKey,s=e.inStringifyKey,u=Object.keys(i).find((function(t){return i[t]===r}));if(!u&&s&&(u=a.anchors.getName(r)||a.anchors.newName()),u)return"*".concat(u).concat(o?" ":"");var l=a.anchors.getName(r)?"Alias node must be after source node":"Source node not found for alias node";throw new Error("".concat(l," [").concat(n,"]"))}}]),n}();function Ps(t,e){var n,r=e instanceof Ns?e.value:e,i=Mo(t);try{for(i.s();!(n=i.n()).done;){var a=n.value;if(a instanceof Es){if(a.key===e||a.key===r)return a;if(a.key&&a.key.value===r)return a}}}catch(t){i.e(t)}finally{i.f()}}oo(Fs,"default",!0);var Bs=function(t){so(n,Ts);var e=vo(n);function n(){return ro(this,n),e.apply(this,arguments)}return ao(n,[{key:"add",value:function(t,e){t?t instanceof Es||(t=new Es(t.key||t,t.value)):t=new Es(t);var n=Ps(this.items,t.key),r=this.schema&&this.schema.sortMapEntries;if(n){if(!e)throw new Error("Key ".concat(t.key," already set"));n.value=t.value}else if(r){var i=this.items.findIndex((function(e){return r(t,e)<0}));-1===i?this.items.push(t):this.items.splice(i,0,t)}else this.items.push(t)}},{key:"delete",value:function(t){var e=Ps(this.items,t);return!!e&&this.items.splice(this.items.indexOf(e),1).length>0}},{key:"get",value:function(t,e){var n=Ps(this.items,t),r=n&&n.value;return!e&&r instanceof Ns?r.value:r}},{key:"has",value:function(t){return!!Ps(this.items,t)}},{key:"set",value:function(t,e){this.add(new Es(t,e),!0)}},{key:"toJSON",value:function(t,e,n){var r=n?new n:e&&e.mapAsMap?new Map:{};e&&e.onCreate&&e.onCreate(r);var i,a=Mo(this.items);try{for(a.s();!(i=a.n()).done;){i.value.addToJSMap(e,r)}}catch(t){a.e(t)}finally{a.f()}return r}},{key:"toString",value:function(t,e,r){if(!t)return JSON.stringify(this);var i,a=Mo(this.items);try{for(a.s();!(i=a.n()).done;){var o=i.value;if(!(o instanceof Es))throw new Error("Map items must all be pairs; found ".concat(JSON.stringify(o)," instead"))}}catch(t){a.e(t)}finally{a.f()}return mo(uo(n.prototype),"toString",this).call(this,t,{blockItem:function(t){return t.str},flowChars:{start:"{",end:"}"},isMap:!0,itemIndent:t.indent||""},e,r)}}]),n}(),Rs=function(t){so(n,Es);var e=vo(n);function n(t){var r;if(ro(this,n),t instanceof Es){var i=t.value;i instanceof Ds||((i=new Ds).items.push(t.value),i.range=t.value.range),(r=e.call(this,t.key,i)).range=t.range}else r=e.call(this,new Ns("<<"),new Ds);return r.type=Es.Type.MERGE_PAIR,po(r)}return ao(n,[{key:"addToJSMap",value:function(t,e){var n,r=Mo(this.value.items);try{for(r.s();!(n=r.n()).done;){var i=n.value.source;if(!(i instanceof Bs))throw new Error("Merge sources must be maps");var a,o=Mo(i.toJSON(null,t,Map));try{for(o.s();!(a=o.n()).done;){var s=yo(a.value,2),u=s[0],l=s[1];e instanceof Map?e.has(u)||e.set(u,l):e instanceof Set?e.add(u):Object.prototype.hasOwnProperty.call(e,u)||Object.defineProperty(e,u,{value:l,writable:!0,enumerable:!0,configurable:!0})}}catch(t){o.e(t)}finally{o.f()}}}catch(t){r.e(t)}finally{r.f()}return e}},{key:"toString",value:function(t,e){var r=this.value;if(r.items.length>1)return mo(uo(n.prototype),"toString",this).call(this,t,e);this.value=r.items[0];var i=mo(uo(n.prototype),"toString",this).call(this,t,e);return this.value=r,i}}]),n}(),js={defaultType:Eo,lineWidth:76},Ys={trueStr:"true",falseStr:"false"},Us={asBigInt:!1},Vs={nullStr:"null"},Ws={defaultType:Vo,doubleQuoted:{jsonEncoding:!1,minMultiLineLength:40},fold:{lineWidth:80,minContentWidth:20}};function qs(t,e,n){var r,i=Mo(e);try{for(i.s();!(r=i.n()).done;){var a=r.value,o=a.format,s=a.test,u=a.resolve;if(s){var l=t.match(s);if(l){var c=u.apply(null,l);return c instanceof Ns||(c=new Ns(c)),o&&(c.format=o),c}}}}catch(t){i.e(t)}finally{i.f()}return n&&(t=n(t)),new Ns(t)}var $s=function(t,e){for(var n=t[e+1];" "===n||"\t"===n;){do{n=t[e+=1]}while(n&&"\n"!==n);n=t[e+1]}return e};function Hs(t,e,n,r){var i=r.indentAtStart,a=r.lineWidth,o=void 0===a?80:a,s=r.minContentWidth,u=void 0===s?20:s,l=r.onFold,c=r.onOverflow;if(!o||o<0)return t;var f=Math.max(1+u,1+o-e.length);if(t.length<=f)return t;var h=[],d={},g=o-e.length;"number"==typeof i&&(i>o-Math.max(2,u)?h.push(0):g=o-i);var p,v=void 0,m=void 0,y=!1,w=-1,b=-1,x=-1;for("block"===n&&-1!==(w=$s(t,w))&&(g=w+f);p=t[w+=1];){if("quoted"===n&&"\\"===p){switch(b=w,t[w+1]){case"x":w+=3;break;case"u":w+=5;break;case"U":w+=9;break;default:w+=1}x=w}if("\n"===p)"block"===n&&(w=$s(t,w)),g=w+f,v=void 0;else{if(" "===p&&m&&" "!==m&&"\n"!==m&&"\t"!==m){var k=t[w+1];k&&" "!==k&&"\n"!==k&&"\t"!==k&&(v=w)}if(w>=g)if(v)h.push(v),g=v+f,v=void 0;else if("quoted"===n){for(;" "===m||"\t"===m;)m=p,p=t[w+=1],y=!0;var _=w>x+1?w-2:b-1;if(d[_])return t;h.push(_),d[_]=!0,g=_+f,v=void 0}else y=!0}m=p}if(y&&c&&c(),0===h.length)return t;l&&l();for(var M=t.slice(0,h[0]),S=0;S<h.length;++S){var A=h[S],N=h[S+1]||t.length;0===A?M="\n".concat(e).concat(t.slice(0,N)):("quoted"===n&&d[A]&&(M+="".concat(t[A],"\\")),M+="\n".concat(e).concat(t.slice(A+1,N)))}return M}var zs=function(t){var e=t.indentAtStart;return e?Object.assign({indentAtStart:e},Ws.fold):Ws.fold},Js=function(t){return/^(%|---|\.\.\.)/m.test(t)};function Xs(t,e){var n=e.implicitKey,r=Ws.doubleQuoted,i=r.jsonEncoding,a=r.minMultiLineLength,o=JSON.stringify(t);if(i)return o;for(var s=e.indent||(Js(t)?"  ":""),u="",l=0,c=0,f=o[c];f;f=o[++c])if(" "===f&&"\\"===o[c+1]&&"n"===o[c+2]&&(u+=o.slice(l,c)+"\\ ",l=c+=1,f="\\"),"\\"===f)switch(o[c+1]){case"u":u+=o.slice(l,c);var h=o.substr(c+2,4);switch(h){case"0000":u+="\\0";break;case"0007":u+="\\a";break;case"000b":u+="\\v";break;case"001b":u+="\\e";break;case"0085":u+="\\N";break;case"00a0":u+="\\_";break;case"2028":u+="\\L";break;case"2029":u+="\\P";break;default:"00"===h.substr(0,2)?u+="\\x"+h.substr(2):u+=o.substr(c,6)}l=(c+=5)+1;break;case"n":if(n||'"'===o[c+2]||o.length<a)c+=1;else{for(u+=o.slice(l,c)+"\n\n";"\\"===o[c+2]&&"n"===o[c+3]&&'"'!==o[c+4];)u+="\n",c+=2;u+=s," "===o[c+2]&&(u+="\\"),l=(c+=1)+1}break;default:c+=1}return u=l?u+o.slice(l):o,n?u:Hs(u,s,"quoted",zs(e))}function Gs(t,e){if(e.implicitKey){if(/\n/.test(t))return Xs(t,e)}else if(/[ \t]\n|\n[ \t]/.test(t))return Xs(t,e);var n=e.indent||(Js(t)?"  ":""),r="'"+t.replace(/'/g,"''").replace(/\n+/g,"$&\n".concat(n))+"'";return e.implicitKey?r:Hs(r,n,"flow",zs(e))}function Ks(t,e,n,r){var i=t.comment,a=t.type,o=t.value;if(/\n[\t ]+$/.test(o)||/^\s*$/.test(o))return Xs(o,e);var s=e.indent||(e.forceBlockIndent||Js(o)?"  ":""),u=s?"2":"1",l=a!==Do&&(a===Eo||!function(t,e,n){if(!e||e<0)return!1;var r=e-n,i=t.length;if(i<=r)return!1;for(var a=0,o=0;a<i;++a)if("\n"===t[a]){if(a-o>r)return!0;if(i-(o=a+1)<=r)return!1}return!0}(o,Ws.fold.lineWidth,s.length)),c=l?"|":">";if(!o)return c+"\n";var f="",h="";if(o=o.replace(/[\n\t ]*$/,(function(t){var e=t.indexOf("\n");return-1===e?c+="-":o!==t&&e===t.length-1||(c+="+",r&&r()),h=t.replace(/\n$/,""),""})).replace(/^[\n ]*/,(function(t){-1!==t.indexOf(" ")&&(c+=u);var e=t.match(/ +$/);return e?(f=t.slice(0,-e[0].length),e[0]):(f=t,"")})),h&&(h=h.replace(/\n+(?!\n|$)/g,"$&".concat(s))),f&&(f=f.replace(/\n+/g,"$&".concat(s))),i&&(c+=" #"+i.replace(/ ?[\r\n]+/g," "),n&&n()),!o)return"".concat(c).concat(u,"\n").concat(s).concat(h);if(l)return o=o.replace(/\n+/g,"$&".concat(s)),"".concat(c,"\n").concat(s).concat(f).concat(o).concat(h);o=o.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,"$&".concat(s));var d=Hs("".concat(f).concat(o).concat(h),s,"block",Ws.fold);return"".concat(c,"\n").concat(s).concat(d)}function Zs(t,e,n,r){var i=Ws.defaultType,a=e.implicitKey,o=e.inFlow,s=t,u=s.type,l=s.value;"string"!=typeof l&&(l=String(l),t=Object.assign({},t,{value:l}));var c=function(i){switch(i){case Do:case Eo:return Ks(t,e,n,r);case Wo:return Xs(l,e);case qo:return Gs(l,e);case Vo:return function(t,e,n,r){var i=t.comment,a=t.type,o=t.value,s=e.actualString,u=e.implicitKey,l=e.indent,c=e.inFlow;if(u&&/[\n[\]{},]/.test(o)||c&&/[[\]{},]/.test(o))return Xs(o,e);if(!o||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o))return u||c||-1===o.indexOf("\n")?-1!==o.indexOf('"')&&-1===o.indexOf("'")?Gs(o,e):Xs(o,e):Ks(t,e,n,r);if(!u&&!c&&a!==Vo&&-1!==o.indexOf("\n"))return Ks(t,e,n,r);if(""===l&&Js(o))return e.forceBlockIndent=!0,Ks(t,e,n,r);var f=o.replace(/\n+/g,"$&\n".concat(l));if(s){var h=e.doc.schema.tags;if("string"!=typeof qs(f,h,h.scalarFallback).value)return Xs(o,e)}var d=u?f:Hs(f,l,"flow",zs(e));return!i||c||-1===d.indexOf("\n")&&-1===i.indexOf("\n")?d:(n&&n(),function(t,e,n){if(!n)return t;var r=n.replace(/[\s\S]^/gm,"$&".concat(e,"#"));return"#".concat(r,"\n").concat(e).concat(t)}(d,l,i))}(t,e,n,r);default:return null}};u!==Wo&&/[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(l)?u=Wo:!a&&!o||u!==Do&&u!==Eo||(u=Wo);var f=c(u);if(null===f&&null===(f=c(i)))throw new Error("Unsupported default string type ".concat(i));return f}function Qs(t){var e=t.format,n=t.minFractionDigits,r=t.tag,i=t.value;if("bigint"==typeof i)return String(i);if(!isFinite(i))return isNaN(i)?".nan":i<0?"-.inf":".inf";var a=JSON.stringify(i);if(!e&&n&&(!r||"tag:yaml.org,2002:float"===r)&&/^\d/.test(a)){var o=a.indexOf(".");o<0&&(o=a.length,a+=".");for(var s=n-(a.length-o-1);s-- >0;)a+="0"}return a}function tu(t,e){var n,r,i;switch(e.type){case Bo:n="}",r="flow map";break;case Ro:n="]",r="flow sequence";break;default:return void t.push(new ns(e,"Not a flow collection!?"))}for(var a=e.items.length-1;a>=0;--a){var o=e.items[a];if(!o||o.type!==Lo){i=o;break}}if(i&&i.char!==n){var s,u="Expected ".concat(r," to end with ").concat(n);"number"==typeof i.offset?(s=new ns(e,u)).offset=i.offset+1:(s=new ns(i,u),i.range&&i.range.end&&(s.offset=i.range.end-i.range.start)),t.push(s)}}function eu(t,e){var n=e.context.src[e.range.start-1];if("\n"!==n&&"\t"!==n&&" "!==n){t.push(new ns(e,"Comments must be separated from other tokens by white space characters"))}}function nu(t,e){var n=String(e),r=n.substr(0,8)+"..."+n.substr(-8);return new ns(t,'The "'.concat(r,'" key is too long'))}function ru(t,e){var n,r=Mo(e);try{for(r.s();!(n=r.n()).done;){var i=n.value,a=i.afterKey,o=i.before,s=i.comment,u=t.items[o];u?(a&&u.value&&(u=u.value),void 0===s?!a&&u.commentBefore||(u.spaceBefore=!0):u.commentBefore?u.commentBefore+="\n"+s:u.commentBefore=s):void 0!==s&&(t.comment?t.comment+="\n"+s:t.comment=s)}}catch(t){r.e(t)}finally{r.f()}}function iu(t,e){var n=e.strValue;return n?"string"==typeof n?n:(n.errors.forEach((function(n){n.source||(n.source=e),t.errors.push(n)})),n.str):""}function au(t,e){var n=e.tag,r=e.type,i=!1;if(n){var a=n.handle,o=n.suffix,s=n.verbatim;if(s){if("!"!==s&&"!!"!==s)return s;var u="Verbatim tags aren't resolved, so ".concat(s," is invalid.");t.errors.push(new ns(e,u))}else if("!"!==a||o)try{return function(t,e){var n=e.tag,r=n.handle,i=n.suffix,a=t.tagPrefixes.find((function(t){return t.handle===r}));if(!a){var o=t.getDefaults().tagPrefixes;if(o&&(a=o.find((function(t){return t.handle===r}))),!a)throw new ns(e,"The ".concat(r," tag handle is non-default and was not declared."))}if(!i)throw new ns(e,"The ".concat(r," tag has no suffix."));if("!"===r&&"1.0"===(t.version||t.options.version)){if("^"===i[0])return t.warnings.push(new is(e,"YAML 1.0 ^ tag expansion is not supported")),i;if(/[:/]/.test(i)){var s=i.match(/^([a-z0-9-]+)\/(.*)/i);return s?"tag:".concat(s[1],".yaml.org,2002:").concat(s[2]):"tag:".concat(i)}}return a.prefix+decodeURIComponent(i)}(t,e)}catch(e){t.errors.push(e)}else i=!0}switch(r){case Do:case Eo:case Wo:case qo:return zo.STR;case Bo:case jo:return zo.MAP;case Ro:case $o:return zo.SEQ;case Vo:return i?zo.STR:null;default:return null}}function ou(t,e,n){var r,i=t.schema.tags,a=[],o=Mo(i);try{for(o.s();!(r=o.n()).done;){var s=r.value;if(s.tag===n){if(!s.test){var u=s.resolve(t,e);return u instanceof Ts?u:new Ns(u)}a.push(s)}}}catch(t){o.e(t)}finally{o.f()}var l=iu(t,e);return"string"==typeof l&&a.length>0?qs(l,a,i.scalarFallback):null}function su(t,e,n){try{var r=ou(t,e,n);if(r)return n&&e.tag&&(r.tag=n),r}catch(n){return n.source||(n.source=e),t.errors.push(n),null}try{var i=function(t){switch(t.type){case Bo:case jo:return zo.MAP;case Ro:case $o:return zo.SEQ;default:return zo.STR}}(e);if(!i)throw new Error("The tag ".concat(n," is unavailable"));var a="The tag ".concat(n," is unavailable, falling back to ").concat(i);t.warnings.push(new is(e,a));var o=ou(t,e,i);return o.tag=n,o}catch(n){var s=new es(e,n.message);return s.stack=n.stack,t.errors.push(s),null}}function uu(t,e){var n,r={before:[],after:[]},i=!1,a=!1,o=Mo(function(t){if(!t)return!1;var e=t.type;return e===Yo||e===Uo||e===Ho}(e.context.parent)?e.context.parent.props.concat(e.props):e.props);try{for(o.s();!(n=o.n()).done;){var s=n.value,u=s.start,l=s.end;switch(e.context.src[u]){case Ao:if(!e.commentHasRequiredWhitespace(u)){t.push(new ns(e,"Comments must be separated from other tokens by white space characters"))}var c=e.header,f=e.valueRange;(f&&(u>f.start||c&&u>c.start)?r.after:r.before).push(e.context.src.slice(u+1,l));break;case So:if(i){t.push(new ns(e,"A node can have at most one anchor"))}i=!0;break;case No:if(a){t.push(new ns(e,"A node can have at most one tag"))}a=!0}}}catch(t){o.e(t)}finally{o.f()}return{comments:r,hasAnchor:i,hasTag:a}}function lu(t,e){if(!e)return null;e.error&&t.errors.push(e.error);var n=uu(t.errors,e),r=n.comments,i=n.hasAnchor,a=n.hasTag;if(i){var o=t.anchors,s=e.anchor,u=o.getNode(s);u&&(o.map[o.newName(s)]=u),o.map[s]=e}if(e.type===To&&(i||a)){t.errors.push(new ns(e,"An alias node must not specify any properties"))}var l=function(t,e){var n=t.anchors,r=t.errors,i=t.schema;if(e.type===To){var a=e.rawValue,o=n.getNode(a);if(!o){var s="Aliased anchor not found: ".concat(a);return r.push(new es(e,s)),null}var u=new Fs(o);return n._cstAliases.push(u),u}var l=au(t,e);if(l)return su(t,e,l);if(e.type!==Vo){var c="Failed to resolve ".concat(e.type," node here");return r.push(new rs(e,c)),null}try{return qs(iu(t,e),i.tags,i.tags.scalarFallback)}catch(t){return t.source||(t.source=e),r.push(t),null}}(t,e);if(l){l.range=[e.range.start,e.range.end],t.options.keepCstNodes&&(l.cstNode=e),t.options.keepNodeTypes&&(l.type=e.type);var c=r.before.join("\n");c&&(l.commentBefore=l.commentBefore?"".concat(l.commentBefore,"\n").concat(c):c);var f=r.after.join("\n");f&&(l.comment=l.comment?"".concat(l.comment,"\n").concat(f):f)}return e.resolved=l}function cu(t,e){if(e.type!==jo&&e.type!==Bo){var n="A ".concat(e.type," node cannot be resolved as a mapping");return t.errors.push(new rs(e,n)),null}var r=e.type===Bo?function(t,e){for(var n=[],r=[],i=void 0,a=!1,o="{",s=0;s<e.items.length;++s){var u=e.items[s];if("string"==typeof u.char){var l=u.char,c=u.offset;if("?"===l&&void 0===i&&!a){a=!0,o=":";continue}if(":"===l){if(void 0===i&&(i=null),":"===o){o=",";continue}}else if(a&&(void 0===i&&","!==l&&(i=null),a=!1),void 0!==i&&(r.push(new Es(i)),i=void 0,","===l)){o=":";continue}if("}"===l){if(s===e.items.length-1)continue}else if(l===o){o=":";continue}var f="Flow map contains an unexpected ".concat(l),h=new rs(e,f);h.offset=c,t.errors.push(h)}else u.type===Oo?n.push({afterKey:!!i,before:r.length}):u.type===Lo?(eu(t.errors,u),n.push({afterKey:!!i,before:r.length,comment:u.comment})):void 0===i?(","===o&&t.errors.push(new ns(u,"Separator , missing in flow map")),i=lu(t,u)):(","!==o&&t.errors.push(new ns(u,"Indicator : missing in flow map entry")),r.push(new Es(i,lu(t,u))),i=void 0,a=!1)}tu(t.errors,e),void 0!==i&&r.push(new Es(i));return{comments:n,items:r}}(t,e):function(t,e){for(var n=[],r=[],i=void 0,a=null,o=0;o<e.items.length;++o){var s=e.items[o];switch(s.type){case Oo:n.push({afterKey:!!i,before:r.length});break;case Lo:n.push({afterKey:!!i,before:r.length,comment:s.comment});break;case Yo:void 0!==i&&r.push(new Es(i)),s.error&&t.errors.push(s.error),i=lu(t,s.node),a=null;break;case Uo:if(void 0===i&&(i=null),s.error&&t.errors.push(s.error),!s.context.atLineStart&&s.node&&s.node.type===jo&&!s.node.context.atLineStart){var u="Nested mappings are not allowed in compact mappings";t.errors.push(new ns(s.node,u))}var l=s.node;if(!l&&s.props.length>0){(l=new as(Vo,[])).context={parent:s,src:s.context.src};var c=s.range.start+1;if(l.range={start:c,end:c},l.valueRange={start:c,end:c},"number"==typeof s.range.origStart){var f=s.range.origStart+1;l.range.origStart=l.range.origEnd=f,l.valueRange.origStart=l.valueRange.origEnd=f}}var h=new Es(i,lu(t,l));fu(s,h),r.push(h),i&&"number"==typeof a&&s.range.start>a+1024&&t.errors.push(nu(e,i)),i=void 0,a=null;break;default:void 0!==i&&r.push(new Es(i)),i=lu(t,s),a=s.range.start,s.error&&t.errors.push(s.error);t:for(var d=o+1;;++d){var g=e.items[d];switch(g&&g.type){case Oo:case Lo:continue t;case Uo:break t;default:var p="Implicit map keys need to be followed by map values";t.errors.push(new ns(s,p));break t}}if(s.valueRangeContainsNewline){var v="Implicit map keys need to be on a single line";t.errors.push(new ns(s,v))}}}void 0!==i&&r.push(new Es(i));return{comments:n,items:r}}(t,e),i=r.comments,a=r.items,o=new Bs;o.items=a,ru(o,i);for(var s=!1,u=0;u<a.length;++u){var l=a[u].key;if(l instanceof Ts&&(s=!0),t.schema.merge&&l&&"<<"===l.value){a[u]=new Rs(a[u]);var c=a[u].value.items,f=null;c.some((function(t){if(t instanceof Fs){var e=t.source.type;return e!==jo&&e!==Bo&&(f="Merge nodes aliases can only point to maps")}return f="Merge nodes can only have Alias nodes as values"})),f&&t.errors.push(new ns(e,f))}else for(var h=u+1;h<a.length;++h){var d=a[h].key;if(l===d||l&&d&&Object.prototype.hasOwnProperty.call(l,"value")&&l.value===d.value){var g='Map keys must be unique; "'.concat(l,'" is repeated');t.errors.push(new ns(e,g));break}}}if(s&&!t.options.mapAsMap){t.warnings.push(new is(e,"Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this."))}return e.resolved=o,o}function fu(t,e){if(function(t){var e=t.context,n=e.lineStart,r=e.node,i=e.src,a=t.props;if(0===a.length)return!1;var o=a[0].start;if(r&&o>r.valueRange.start)return!1;if(i[o]!==Ao)return!1;for(var s=n;s<o;++s)if("\n"===i[s])return!1;return!0}(t)){var n=t.getPropValue(0,Ao,!0),r=!1,i=e.value.commentBefore;if(i&&i.startsWith(n))e.value.commentBefore=i.substr(n.length+1),r=!0;else{var a=e.value.comment;!t.node&&a&&a.startsWith(n)&&(e.value.comment=a.substr(n.length+1),r=!0)}r&&(e.comment=n)}}function hu(t,e){if(e.type!==$o&&e.type!==Ro){var n="A ".concat(e.type," node cannot be resolved as a sequence");return t.errors.push(new rs(e,n)),null}var r=e.type===Ro?function(t,e){for(var n=[],r=[],i=!1,a=void 0,o=null,s="[",u=null,l=0;l<e.items.length;++l){var c=e.items[l];if("string"==typeof c.char){var f=c.char,h=c.offset;if(":"===f||!i&&void 0===a||(i&&void 0===a&&(a=s?r.pop():null),r.push(new Es(a)),i=!1,a=void 0,o=null),f===s)s=null;else if(s||"?"!==f){if("["!==s&&":"===f&&void 0===a){if(","===s){if((a=r.pop())instanceof Es){var d=new ns(e,"Chaining flow sequence pairs is invalid");d.offset=h,t.errors.push(d)}if(!i&&"number"==typeof o){var g=c.range?c.range.start:c.offset;g>o+1024&&t.errors.push(nu(e,a));for(var p=u.context.src,v=o;v<g;++v)if("\n"===p[v]){var m="Implicit keys of flow sequence pairs need to be on a single line";t.errors.push(new ns(u,m));break}}}else a=null;o=null,i=!1,s=null}else if("["===s||"]"!==f||l<e.items.length-1){var y="Flow sequence contains an unexpected ".concat(f),w=new rs(e,y);w.offset=h,t.errors.push(w)}}else i=!0}else if(c.type===Oo)n.push({before:r.length});else if(c.type===Lo)eu(t.errors,c),n.push({comment:c.comment,before:r.length});else{if(s){var b="Expected a ".concat(s," in flow sequence");t.errors.push(new ns(c,b))}var x=lu(t,c);void 0===a?(r.push(x),u=c):(r.push(new Es(a,x)),a=void 0),o=c.range.start,s=","}}tu(t.errors,e),void 0!==a&&r.push(new Es(a));return{comments:n,items:r}}(t,e):function(t,e){for(var n=[],r=[],i=0;i<e.items.length;++i){var a=e.items[i];switch(a.type){case Oo:n.push({before:r.length});break;case Lo:n.push({comment:a.comment,before:r.length});break;case Ho:if(a.error&&t.errors.push(a.error),r.push(lu(t,a.node)),a.hasProps){var o="Sequence items cannot have tags or anchors before the - indicator";t.errors.push(new ns(a,o))}break;default:a.error&&t.errors.push(a.error),t.errors.push(new rs(a,"Unexpected ".concat(a.type," node in sequence")))}}return{comments:n,items:r}}(t,e),i=r.comments,a=r.items,o=new Ds;if(o.items=a,ru(o,i),!t.options.mapAsMap&&a.some((function(t){return t instanceof Es&&t.key instanceof Ts}))){t.warnings.push(new is(e,"Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this."))}return e.resolved=o,o}var du={identify:function(t){return t instanceof Uint8Array},default:!1,tag:"tag:yaml.org,2002:binary",resolve:function(t,e){var n=iu(t,e);if("function"==typeof Buffer)return Buffer.from(n,"base64");if("function"==typeof atob){for(var r=atob(n.replace(/[\n\r]/g,"")),i=new Uint8Array(r.length),a=0;a<r.length;++a)i[a]=r.charCodeAt(a);return i}return t.errors.push(new es(e,"This environment does not support reading binary tags; either Buffer or atob is required")),null},options:js,stringify:function(t,e,n,r){var i,a=t.comment,o=t.type,s=t.value;if("function"==typeof Buffer)i=s instanceof Buffer?s.toString("base64"):Buffer.from(s.buffer).toString("base64");else{if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");for(var u="",l=0;l<s.length;++l)u+=String.fromCharCode(s[l]);i=btoa(u)}if(o||(o=js.defaultType),o===Wo)s=i;else{for(var c=js.lineWidth,f=Math.ceil(i.length/c),h=new Array(f),d=0,g=0;d<f;++d,g+=c)h[d]=i.substr(g,c);s=h.join(o===Eo?"\n":" ")}return Zs({comment:a,type:o,value:s},e,n,r)}};function gu(t,e){for(var n=hu(t,e),r=0;r<n.items.length;++r){var i=n.items[r];if(!(i instanceof Es)){if(i instanceof Bs){if(i.items.length>1){throw new ns(e,"Each pair must have its own sequence indicator")}var a=i.items[0]||new Es;i.commentBefore&&(a.commentBefore=a.commentBefore?"".concat(i.commentBefore,"\n").concat(a.commentBefore):i.commentBefore),i.comment&&(a.comment=a.comment?"".concat(i.comment,"\n").concat(a.comment):i.comment),i=a}n.items[r]=i instanceof Es?i:new Es(i)}}return n}function pu(t,e,n){var r=new Ds(t);r.tag="tag:yaml.org,2002:pairs";var i,a=Mo(e);try{for(a.s();!(i=a.n()).done;){var o=i.value,s=void 0,u=void 0;if(Array.isArray(o)){if(2!==o.length)throw new TypeError("Expected [key, value] tuple: ".concat(o));s=o[0],u=o[1]}else if(o&&o instanceof Object){var l=Object.keys(o);if(1!==l.length)throw new TypeError("Expected { key: value } tuple: ".concat(o));u=o[s=l[0]]}else s=o;var c=t.createPair(s,u,n);r.items.push(c)}}catch(t){a.e(t)}finally{a.f()}return r}var vu={default:!1,tag:"tag:yaml.org,2002:pairs",resolve:gu,createNode:pu},mu=function(t){so(n,Ds);var e=vo(n);function n(){var t;return ro(this,n),oo(go(t=e.call(this)),"add",Bs.prototype.add.bind(go(t))),oo(go(t),"delete",Bs.prototype.delete.bind(go(t))),oo(go(t),"get",Bs.prototype.get.bind(go(t))),oo(go(t),"has",Bs.prototype.has.bind(go(t))),oo(go(t),"set",Bs.prototype.set.bind(go(t))),t.tag=n.tag,t}return ao(n,[{key:"toJSON",value:function(t,e){var n=new Map;e&&e.onCreate&&e.onCreate(n);var r,i=Mo(this.items);try{for(i.s();!(r=i.n()).done;){var a=r.value,o=void 0,s=void 0;if(a instanceof Es?(o=As(a.key,"",e),s=As(a.value,o,e)):o=As(a,"",e),n.has(o))throw new Error("Ordered maps must not include duplicate keys");n.set(o,s)}}catch(t){i.e(t)}finally{i.f()}return n}}]),n}();oo(mu,"tag","tag:yaml.org,2002:omap");var yu={identify:function(t){return t instanceof Map},nodeClass:mu,default:!1,tag:"tag:yaml.org,2002:omap",resolve:function(t,e){var n,r=gu(t,e),i=[],a=Mo(r.items);try{for(a.s();!(n=a.n()).done;){var o=n.value.key;if(o instanceof Ns){if(i.includes(o.value)){throw new ns(e,"Ordered maps must not include duplicate keys")}i.push(o.value)}}}catch(t){a.e(t)}finally{a.f()}return Object.assign(new mu,r)},createNode:function(t,e,n){var r=pu(t,e,n),i=new mu;return i.items=r.items,i}},wu=function(t){so(n,Bs);var e=vo(n);function n(){var t;return ro(this,n),(t=e.call(this)).tag=n.tag,t}return ao(n,[{key:"add",value:function(t){var e=t instanceof Es?t:new Es(t);Ps(this.items,e.key)||this.items.push(e)}},{key:"get",value:function(t,e){var n=Ps(this.items,t);return!e&&n instanceof Es?n.key instanceof Ns?n.key.value:n.key:n}},{key:"set",value:function(t,e){if("boolean"!=typeof e)throw new Error("Expected boolean value for set(key, value) in a YAML set, not ".concat(no(e)));var n=Ps(this.items,t);n&&!e?this.items.splice(this.items.indexOf(n),1):!n&&e&&this.items.push(new Es(t))}},{key:"toJSON",value:function(t,e){return mo(uo(n.prototype),"toJSON",this).call(this,t,e,Set)}},{key:"toString",value:function(t,e,r){if(!t)return JSON.stringify(this);if(this.hasAllNullValues())return mo(uo(n.prototype),"toString",this).call(this,t,e,r);throw new Error("Set items must all have null values")}}]),n}();oo(wu,"tag","tag:yaml.org,2002:set");var bu={identify:function(t){return t instanceof Set},nodeClass:wu,default:!1,tag:"tag:yaml.org,2002:set",resolve:function(t,e){var n=cu(t,e);if(!n.hasAllNullValues())throw new ns(e,"Set items must all have null values");return Object.assign(new wu,n)},createNode:function(t,e,n){var r,i=new wu,a=Mo(e);try{for(a.s();!(r=a.n()).done;){var o=r.value;i.items.push(t.createPair(o,null,n))}}catch(t){a.e(t)}finally{a.f()}return i}},xu=function(t,e){var n=e.split(":").reduce((function(t,e){return 60*t+Number(e)}),0);return"-"===t?-n:n},ku=function(t){var e=t.value;if(isNaN(e)||!isFinite(e))return Qs(e);var n="";e<0&&(n="-",e=Math.abs(e));var r=[e%60];return e<60?r.unshift(0):(e=Math.round((e-r[0])/60),r.unshift(e%60),e>=60&&(e=Math.round((e-r[0])/60),r.unshift(e))),n+r.map((function(t){return t<10?"0"+String(t):String(t)})).join(":").replace(/000000\d*$/,"")},_u={identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,resolve:function(t,e,n){return xu(e,n.replace(/_/g,""))},stringify:ku},Mu={identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,resolve:function(t,e,n){return xu(e,n.replace(/_/g,""))},stringify:ku},Su={identify:function(t){return t instanceof Date},default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^(?:([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?)$"),resolve:function(t,e,n,r,i,a,o,s,u){s&&(s=(s+"00").substr(1,3));var l=Date.UTC(e,n-1,r,i||0,a||0,o||0,s||0);if(u&&"Z"!==u){var c=xu(u[0],u.slice(1));Math.abs(c)<30&&(c*=60),l-=6e4*c}return new Date(l)},stringify:function(t){return t.value.toISOString().replace(/((T00:00)?:00)?\.000Z$/,"")}};function Au(t){var e="undefined"!=typeof process&&process.env||{};return t?"undefined"!=typeof YAML_SILENCE_DEPRECATION_WARNINGS?!YAML_SILENCE_DEPRECATION_WARNINGS:!e.YAML_SILENCE_DEPRECATION_WARNINGS:"undefined"!=typeof YAML_SILENCE_WARNINGS?!YAML_SILENCE_WARNINGS:!e.YAML_SILENCE_WARNINGS}function Nu(t,e){if(Au(!1)){var n="undefined"!=typeof process&&process.emitWarning;n?n(t,e):console.warn(e?"".concat(e,": ").concat(t):t)}}var Iu={};var Cu={createNode:function(t,e,n){var r=new Bs(t);if(e instanceof Map){var i,a=Mo(e);try{for(a.s();!(i=a.n()).done;){var o=yo(i.value,2),s=o[0],u=o[1];r.items.push(t.createPair(s,u,n))}}catch(t){a.e(t)}finally{a.f()}}else if(e&&"object"===no(e))for(var l=0,c=Object.keys(e);l<c.length;l++){var f=c[l];r.items.push(t.createPair(f,e[f],n))}return"function"==typeof t.sortMapEntries&&r.items.sort(t.sortMapEntries),r},default:!0,nodeClass:Bs,tag:"tag:yaml.org,2002:map",resolve:cu};var Tu={createNode:function(t,e,n){var r=new Ds(t);if(e&&e[Symbol.iterator]){var i,a=Mo(e);try{for(a.s();!(i=a.n()).done;){var o=i.value,s=t.createNode(o,n.wrapScalars,null,n);r.items.push(s)}}catch(t){a.e(t)}finally{a.f()}}return r},default:!0,nodeClass:Ds,tag:"tag:yaml.org,2002:seq",resolve:hu},Ou=[Cu,Tu,{identify:function(t){return"string"==typeof t},default:!0,tag:"tag:yaml.org,2002:str",resolve:iu,stringify:function(t,e,n,r){return Zs(t,e=Object.assign({actualString:!0},e),n,r)},options:Ws}],Du=function(t){return"bigint"==typeof t||Number.isInteger(t)},Eu=function(t,e,n){return Us.asBigInt?BigInt(t):parseInt(e,n)};function Lu(t,e,n){var r=t.value;return Du(r)&&r>=0?n+r.toString(e):Qs(t)}var Fu={identify:function(t){return null==t},createNode:function(t,e,n){return n.wrapScalars?new Ns(null):null},default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:function(){return null},options:Vs,stringify:function(){return Vs.nullStr}},Pu={identify:function(t){return"boolean"==typeof t},default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:function(t){return"t"===t[0]||"T"===t[0]},options:Ys,stringify:function(t){return t.value?Ys.trueStr:Ys.falseStr}},Bu={identify:function(t){return Du(t)&&t>=0},default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o([0-7]+)$/,resolve:function(t,e){return Eu(t,e,8)},options:Us,stringify:function(t){return Lu(t,8,"0o")}},Ru={identify:Du,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:function(t){return Eu(t,t,10)},options:Us,stringify:Qs},ju={identify:function(t){return Du(t)&&t>=0},default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x([0-9a-fA-F]+)$/,resolve:function(t,e){return Eu(t,e,16)},options:Us,stringify:function(t){return Lu(t,16,"0x")}},Yu={identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.inf|(\.nan))$/i,resolve:function(t,e){return e?NaN:"-"===t[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY},stringify:Qs},Uu={identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:function(t){return parseFloat(t)},stringify:function(t){var e=t.value;return Number(e).toExponential()}},Vu={identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.([0-9]+)|[0-9]+\.([0-9]*))$/,resolve:function(t,e,n){var r=e||n,i=new Ns(parseFloat(t));return r&&"0"===r[r.length-1]&&(i.minFractionDigits=r.length),i},stringify:Qs},Wu=Ou.concat([Fu,Pu,Bu,Ru,ju,Yu,Uu,Vu]),qu=function(t){return"bigint"==typeof t||Number.isInteger(t)},$u=function(t){var e=t.value;return JSON.stringify(e)},Hu=[Cu,Tu,{identify:function(t){return"string"==typeof t},default:!0,tag:"tag:yaml.org,2002:str",resolve:iu,stringify:$u},{identify:function(t){return null==t},createNode:function(t,e,n){return n.wrapScalars?new Ns(null):null},default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:function(){return null},stringify:$u},{identify:function(t){return"boolean"==typeof t},default:!0,tag:"tag:yaml.org,2002:bool",test:/^true|false$/,resolve:function(t){return"true"===t},stringify:$u},{identify:qu,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:function(t){return Us.asBigInt?BigInt(t):parseInt(t,10)},stringify:function(t){var e=t.value;return qu(e)?e.toString():JSON.stringify(e)}},{identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:function(t){return parseFloat(t)},stringify:$u}];Hu.scalarFallback=function(t){throw new SyntaxError("Unresolved plain scalar ".concat(JSON.stringify(t)))};var zu=function(t){return t.value?Ys.trueStr:Ys.falseStr},Ju=function(t){return"bigint"==typeof t||Number.isInteger(t)};function Xu(t,e,n){var r=e.replace(/_/g,"");if(Us.asBigInt){switch(n){case 2:r="0b".concat(r);break;case 8:r="0o".concat(r);break;case 16:r="0x".concat(r)}var i=BigInt(r);return"-"===t?BigInt(-1)*i:i}var a=parseInt(r,n);return"-"===t?-1*a:a}function Gu(t,e,n){var r=t.value;if(Ju(r)){var i=r.toString(e);return r<0?"-"+n+i.substr(1):n+i}return Qs(t)}var Ku=Ou.concat([{identify:function(t){return null==t},createNode:function(t,e,n){return n.wrapScalars?new Ns(null):null},default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:function(){return null},options:Vs,stringify:function(){return Vs.nullStr}},{identify:function(t){return"boolean"==typeof t},default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:function(){return!0},options:Ys,stringify:zu},{identify:function(t){return"boolean"==typeof t},default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,resolve:function(){return!1},options:Ys,stringify:zu},{identify:Ju,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^([-+]?)0b([0-1_]+)$/,resolve:function(t,e,n){return Xu(e,n,2)},stringify:function(t){return Gu(t,2,"0b")}},{identify:Ju,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^([-+]?)0([0-7_]+)$/,resolve:function(t,e,n){return Xu(e,n,8)},stringify:function(t){return Gu(t,8,"0")}},{identify:Ju,default:!0,tag:"tag:yaml.org,2002:int",test:/^([-+]?)([0-9][0-9_]*)$/,resolve:function(t,e,n){return Xu(e,n,10)},stringify:Qs},{identify:Ju,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^([-+]?)0x([0-9a-fA-F_]+)$/,resolve:function(t,e,n){return Xu(e,n,16)},stringify:function(t){return Gu(t,16,"0x")}},{identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.inf|(\.nan))$/i,resolve:function(t,e){return e?NaN:"-"===t[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY},stringify:Qs},{identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:function(t){return parseFloat(t.replace(/_/g,""))},stringify:function(t){var e=t.value;return Number(e).toExponential()}},{identify:function(t){return"number"==typeof t},default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,resolve:function(t,e){var n=new Ns(parseFloat(t.replace(/_/g,"")));if(e){var r=e.replace(/_/g,"");"0"===r[r.length-1]&&(n.minFractionDigits=r.length)}return n},stringify:Qs}],du,yu,vu,bu,_u,Mu,Su),Zu={core:Wu,failsafe:Ou,json:Hu,yaml11:Ku},Qu={binary:du,bool:Pu,float:Vu,floatExp:Uu,floatNaN:Yu,floatTime:Mu,int:Ru,intHex:ju,intOct:Bu,intTime:_u,map:Cu,null:Fu,omap:yu,pairs:vu,seq:Tu,set:bu,timestamp:Su};function tl(t,e,n){if(t instanceof Ss)return t;var r=n.defaultPrefix,i=n.onTagObj,a=n.prevObjects,o=n.schema,s=n.wrapScalars;e&&e.startsWith("!!")&&(e=r+e.slice(2));var u=function(t,e,n){if(e){var r=n.filter((function(t){return t.tag===e})),i=r.find((function(t){return!t.format}))||r[0];if(!i)throw new Error("Tag ".concat(e," not found"));return i}return n.find((function(e){return(e.identify&&e.identify(t)||e.class&&t instanceof e.class)&&!e.format}))}(t,e,o.tags);if(!u){if("function"==typeof t.toJSON&&(t=t.toJSON()),!t||"object"!==no(t))return s?new Ns(t):t;u=t instanceof Map?Cu:t[Symbol.iterator]?Tu:Cu}i&&(i(u),delete n.onTagObj);var l={value:void 0,node:void 0};if(t&&"object"===no(t)&&a){var c=a.get(t);if(c){var f=new Fs(c);return n.aliasNodes.push(f),f}l.value=t,a.set(t,l)}return l.node=u.createNode?u.createNode(n.schema,t,n):s?new Ns(t):t,e&&l.node instanceof Ss&&(l.node.tag=e),l.node}var el=function(t,e){return t.key<e.key?-1:t.key>e.key?1:0},nl=function(){function t(e){var n=e.customTags,r=e.merge,i=e.schema,a=e.sortMapEntries,o=e.tags;ro(this,t),this.merge=!!r,this.name=i,this.sortMapEntries=!0===a?el:a||null,!n&&o&&function(t,e){if(!Iu[t]&&Au(!0)){Iu[t]=!0;var n="The option '".concat(t,"' will be removed in a future release");Nu(n+=e?", use '".concat(e,"' instead."):".","DeprecationWarning")}}("tags","customTags"),this.tags=function(t,e,n,r){var i=t[r.replace(/\W/g,"")];if(!i){var a=Object.keys(t).map((function(t){return JSON.stringify(t)})).join(", ");throw new Error('Unknown schema "'.concat(r,'"; use one of ').concat(a))}if(Array.isArray(n)){var o,s=Mo(n);try{for(s.s();!(o=s.n()).done;){var u=o.value;i=i.concat(u)}}catch(t){s.e(t)}finally{s.f()}}else"function"==typeof n&&(i=n(i.slice()));for(var l=0;l<i.length;++l){var c=i[l];if("string"==typeof c){var f=e[c];if(!f){var h=Object.keys(e).map((function(t){return JSON.stringify(t)})).join(", ");throw new Error('Unknown custom tag "'.concat(c,'"; use one of ').concat(h))}i[l]=f}}return i}(Zu,Qu,n||o,i)}return ao(t,[{key:"createNode",value:function(e,n,r,i){var a={defaultPrefix:t.defaultPrefix,schema:this,wrapScalars:n};return tl(e,r,i?Object.assign(i,a):a)}},{key:"createPair",value:function(t,e,n){n||(n={wrapScalars:!0});var r=this.createNode(t,n.wrapScalars,null,n),i=this.createNode(e,n.wrapScalars,null,n);return new Es(r,i)}}]),t}();oo(nl,"defaultPrefix","tag:yaml.org,2002:"),oo(nl,"defaultTags",zo);var rl={anchorPrefix:"a",customTags:null,indent:2,indentSeq:!0,keepCstNodes:!1,keepNodeTypes:!0,keepBlobsInJSON:!0,mapAsMap:!1,maxAliasCount:100,prettyErrors:!1,simpleKeys:!1,version:"1.2"},il={get binary(){return js},set binary(t){Object.assign(js,t)},get bool(){return Ys},set bool(t){Object.assign(Ys,t)},get int(){return Us},set int(t){Object.assign(Us,t)},get null(){return Vs},set null(t){Object.assign(Vs,t)},get str(){return Ws},set str(t){Object.assign(Ws,t)}},al={"1.0":{schema:"yaml-1.1",merge:!0,tagPrefixes:[{handle:"!",prefix:"tag:yaml.org,2002:"},{handle:"!!",prefix:"tag:private.yaml.org,2002:"}]},1.1:{schema:"yaml-1.1",merge:!0,tagPrefixes:[{handle:"!",prefix:"!"},{handle:"!!",prefix:"tag:yaml.org,2002:"}]},1.2:{schema:"core",merge:!1,tagPrefixes:[{handle:"!",prefix:"!"},{handle:"!!",prefix:"tag:yaml.org,2002:"}]}};function ol(t,e){if("1.0"===(t.version||t.options.version)){var n=e.match(/^tag:private\.yaml\.org,2002:([^:/]+)$/);if(n)return"!"+n[1];var r=e.match(/^tag:([a-zA-Z0-9-]+)\.yaml\.org,2002:(.*)/);return r?"!".concat(r[1],"/").concat(r[2]):"!".concat(e.replace(/^tag:/,""))}var i=t.tagPrefixes.find((function(t){return 0===e.indexOf(t.prefix)}));if(!i){var a=t.getDefaults().tagPrefixes;i=a&&a.find((function(t){return 0===e.indexOf(t.prefix)}))}if(!i)return"!"===e[0]?e:"!<".concat(e,">");var o=e.substr(i.prefix.length).replace(/[!,[\]{}]/g,(function(t){return{"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"}[t]}));return i.handle+o}function sl(t,e,n,r){var i,a=e.doc,o=a.anchors,s=a.schema;if(!(t instanceof Ss)){var u={aliasNodes:[],onTagObj:function(t){return i=t},prevObjects:new Map};t=s.createNode(t,!0,null,u);var l,c=Mo(u.aliasNodes);try{for(c.s();!(l=c.n()).done;){var f=l.value;f.source=f.source.node;var h=o.getName(f.source);h||(h=o.newName(),o.map[h]=f.source)}}catch(t){c.e(t)}finally{c.f()}}if(t instanceof Es)return t.toString(e,n,r);i||(i=function(t,e){if(e instanceof Fs)return Fs;if(e.tag){var n=t.filter((function(t){return t.tag===e.tag}));if(n.length>0)return n.find((function(t){return t.format===e.format}))||n[0]}var r,i;if(e instanceof Ns){i=e.value;var a=t.filter((function(t){return t.identify&&t.identify(i)||t.class&&i instanceof t.class}));r=a.find((function(t){return t.format===e.format}))||a.find((function(t){return!t.format}))}else i=e,r=t.find((function(t){return t.nodeClass&&i instanceof t.nodeClass}));if(!r){var o=i&&i.constructor?i.constructor.name:no(i);throw new Error("Tag not resolved for ".concat(o," value"))}return r}(s.tags,t));var d=function(t,e,n){var r=n.anchors,i=n.doc,a=[],o=i.anchors.getName(t);return o&&(r[o]=t,a.push("&".concat(o))),t.tag?a.push(ol(i,t.tag)):e.default||a.push(ol(i,e.tag)),a.join(" ")}(t,i,e);d.length>0&&(e.indentAtStart=(e.indentAtStart||0)+d.length+1);var g="function"==typeof i.stringify?i.stringify(t,e,n,r):t instanceof Ns?Zs(t,e,n,r):t.toString(e,n,r);return d?t instanceof Ns||"{"===g[0]||"["===g[0]?"".concat(d," ").concat(g):"".concat(d,"\n").concat(e.indent).concat(g):g}var ul=function(){function t(e){ro(this,t),oo(this,"map",Object.create(null)),this.prefix=e}return ao(t,[{key:"createAlias",value:function(t,e){return this.setAnchor(t,e),new Fs(t)}},{key:"createMergePair",value:function(){for(var t=this,e=new Rs,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return e.value.items=r.map((function(e){if(e instanceof Fs){if(e.source instanceof Bs)return e}else if(e instanceof Bs)return t.createAlias(e);throw new Error("Merge sources must be Map nodes or their Aliases")})),e}},{key:"getName",value:function(t){var e=this.map;return Object.keys(e).find((function(n){return e[n]===t}))}},{key:"getNames",value:function(){return Object.keys(this.map)}},{key:"getNode",value:function(t){return this.map[t]}},{key:"newName",value:function(t){t||(t=this.prefix);for(var e=Object.keys(this.map),n=1;;++n){var r="".concat(t).concat(n);if(!e.includes(r))return r}}},{key:"resolveNodes",value:function(){var t=this.map,e=this._cstAliases;Object.keys(t).forEach((function(e){t[e]=t[e].resolved})),e.forEach((function(t){t.source=t.source.resolved})),delete this._cstAliases}},{key:"setAnchor",value:function(e,n){if(null!=e&&!t.validAnchorNode(e))throw new Error("Anchors may only be set for Scalar, Seq and Map nodes");if(n&&/[\x00-\x19\s,[\]{}]/.test(n))throw new Error("Anchor names must not contain whitespace or control characters");var r=this.map,i=e&&Object.keys(r).find((function(t){return r[t]===e}));if(i){if(!n)return i;i!==n&&(delete r[i],r[n]=e)}else{if(!n){if(!e)return null;n=this.newName()}r[n]=e}return n}}],[{key:"validAnchorNode",value:function(t){return t instanceof Ns||t instanceof Ds||t instanceof Bs}}]),t}(),ll=function t(e,n){if(e&&"object"===no(e)){var r=e.tag;e instanceof Ts?(r&&(n[r]=!0),e.items.forEach((function(e){return t(e,n)}))):e instanceof Es?(t(e.key,n),t(e.value,n)):e instanceof Ns&&r&&(n[r]=!0)}return n},cl=function(t){return Object.keys(ll(t,{}))};function fl(t,e){var n=t.tagPrefixes,r=yo(e.parameters,2),i=r[0],a=r[1];if(!i||!a){throw new ns(e,"Insufficient parameters given for %TAG directive")}if(n.some((function(t){return t.handle===i}))){throw new ns(e,"The %TAG directive must only be given at most once per handle in the same document.")}return{handle:i,prefix:a}}function hl(t,e){var n=yo(e.parameters,1)[0];if("YAML:1.0"===e.name&&(n="1.0"),!n){throw new ns(e,"Insufficient parameters given for %YAML directive")}if(!al[n]){var r=t.version||t.options.version,i="Document will be parsed as YAML ".concat(r," rather than YAML ").concat(n);t.warnings.push(new is(e,i))}return n}function dl(t){if(t instanceof Ts)return!0;throw new Error("Expected a YAML collection as document contents")}var gl=function(){function t(e){ro(this,t),this.anchors=new ul(e.anchorPrefix),this.commentBefore=null,this.comment=null,this.contents=null,this.directivesEndMarker=null,this.errors=[],this.options=e,this.schema=null,this.tagPrefixes=[],this.version=null,this.warnings=[]}return ao(t,[{key:"add",value:function(t){return dl(this.contents),this.contents.add(t)}},{key:"addIn",value:function(t,e){dl(this.contents),this.contents.addIn(t,e)}},{key:"delete",value:function(t){return dl(this.contents),this.contents.delete(t)}},{key:"deleteIn",value:function(t){return Cs(t)?null!=this.contents&&(this.contents=null,!0):(dl(this.contents),this.contents.deleteIn(t))}},{key:"getDefaults",value:function(){return t.defaults[this.version]||t.defaults[this.options.version]||{}}},{key:"get",value:function(t,e){return this.contents instanceof Ts?this.contents.get(t,e):void 0}},{key:"getIn",value:function(t,e){return Cs(t)?!e&&this.contents instanceof Ns?this.contents.value:this.contents:this.contents instanceof Ts?this.contents.getIn(t,e):void 0}},{key:"has",value:function(t){return this.contents instanceof Ts&&this.contents.has(t)}},{key:"hasIn",value:function(t){return Cs(t)?void 0!==this.contents:this.contents instanceof Ts&&this.contents.hasIn(t)}},{key:"set",value:function(t,e){dl(this.contents),this.contents.set(t,e)}},{key:"setIn",value:function(t,e){Cs(t)?this.contents=e:(dl(this.contents),this.contents.setIn(t,e))}},{key:"setSchema",value:function(t,e){if(t||e||!this.schema){"number"==typeof t&&(t=t.toFixed(1)),"1.0"===t||"1.1"===t||"1.2"===t?(this.version?this.version=t:this.options.version=t,delete this.options.schema):t&&"string"==typeof t&&(this.options.schema=t),Array.isArray(e)&&(this.options.customTags=e);var n=Object.assign({},this.getDefaults(),this.options);this.schema=new nl(n)}}},{key:"parse",value:function(t,e){this.options.keepCstNodes&&(this.cstNode=t),this.options.keepNodeTypes&&(this.type="DOCUMENT");var n=t.directives,r=void 0===n?[]:n,i=t.contents,a=void 0===i?[]:i,o=t.directivesEndMarker,s=t.error,u=t.valueRange;if(s&&(s.source||(s.source=this),this.errors.push(s)),function(t,e,n){var r,i=[],a=!1,o=Mo(e);try{for(o.s();!(r=o.n()).done;){var s=r.value,u=s.comment,l=s.name;switch(l){case"TAG":try{t.tagPrefixes.push(fl(t,s))}catch(e){t.errors.push(e)}a=!0;break;case"YAML":case"YAML:1.0":t.version&&t.errors.push(new ns(s,"The %YAML directive must only be given at most once per document."));try{t.version=hl(t,s)}catch(e){t.errors.push(e)}a=!0;break;default:if(l){var c="YAML only supports %TAG and %YAML directives, and not %".concat(l);t.warnings.push(new is(s,c))}}u&&i.push(u)}}catch(t){o.e(t)}finally{o.f()}n&&!a&&"1.1"===(t.version||n.version||t.options.version)&&(t.tagPrefixes=n.tagPrefixes.map((function(t){return{handle:t.handle,prefix:t.prefix}})),t.version=n.version);t.commentBefore=i.join("\n")||null}(this,r,e),o&&(this.directivesEndMarker=!0),this.range=u?[u.start,u.end]:null,this.setSchema(),this.anchors._cstAliases=[],function(t,e){var n,r={before:[],after:[]},i=void 0,a=!1,o=Mo(e);try{for(o.s();!(n=o.n()).done;){var s=n.value;if(s.valueRange){if(void 0!==i){t.errors.push(new rs(s,"Document contains trailing content not separated by a ... or --- line"));break}var u=lu(t,s);a&&(u.spaceBefore=!0,a=!1),i=u}else null!==s.comment?(void 0===i?r.before:r.after).push(s.comment):s.type===Oo&&(a=!0,void 0===i&&r.before.length>0&&!t.commentBefore&&(t.commentBefore=r.before.join("\n"),r.before=[]))}}catch(t){o.e(t)}finally{o.f()}if(t.contents=i||null,i){var l=r.before.join("\n");if(l){var c=i instanceof Ts&&i.items[0]?i.items[0]:i;c.commentBefore=c.commentBefore?"".concat(l,"\n").concat(c.commentBefore):l}t.comment=r.after.join("\n")||null}else t.comment=r.before.concat(r.after).join("\n")||null}(this,a),this.anchors.resolveNodes(),this.options.prettyErrors){var l,c=Mo(this.errors);try{for(c.s();!(l=c.n()).done;){var f=l.value;f instanceof ts&&f.makePretty()}}catch(t){c.e(t)}finally{c.f()}var h,d=Mo(this.warnings);try{for(d.s();!(h=d.n()).done;){var g=h.value;g instanceof ts&&g.makePretty()}}catch(t){d.e(t)}finally{d.f()}}return this}},{key:"listNonDefaultTags",value:function(){return cl(this.contents).filter((function(t){return 0!==t.indexOf(nl.defaultPrefix)}))}},{key:"setTagPrefix",value:function(t,e){if("!"!==t[0]||"!"!==t[t.length-1])throw new Error("Handle must start and end with !");if(e){var n=this.tagPrefixes.find((function(e){return e.handle===t}));n?n.prefix=e:this.tagPrefixes.push({handle:t,prefix:e})}else this.tagPrefixes=this.tagPrefixes.filter((function(e){return e.handle!==t}))}},{key:"toJSON",value:function(t,e){var n=this,r=this.options,i=r.keepBlobsInJSON,a=r.mapAsMap,o=r.maxAliasCount,s=i&&("string"!=typeof t||!(this.contents instanceof Ns)),u={doc:this,indentStep:"  ",keep:s,mapAsMap:s&&!!a,maxAliasCount:o,stringify:sl},l=Object.keys(this.anchors.map);l.length>0&&(u.anchors=new Map(l.map((function(t){return[n.anchors.map[t],{alias:[],aliasCount:0,count:1}]}))));var c=As(this.contents,t,u);if("function"==typeof e&&u.anchors){var f,h=Mo(u.anchors.values());try{for(h.s();!(f=h.n()).done;){var d=f.value,g=d.count;e(d.res,g)}}catch(t){h.e(t)}finally{h.f()}}return c}},{key:"toString",value:function(){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");var t=this.options.indent;if(!Number.isInteger(t)||t<=0){var e=JSON.stringify(t);throw new Error('"indent" option must be a positive integer, not '.concat(e))}this.setSchema();var n=[],r=!1;if(this.version){var i="%YAML 1.2";"yaml-1.1"===this.schema.name&&("1.0"===this.version?i="%YAML:1.0":"1.1"===this.version&&(i="%YAML 1.1")),n.push(i),r=!0}var a=this.listNonDefaultTags();this.tagPrefixes.forEach((function(t){var e=t.handle,i=t.prefix;a.some((function(t){return 0===t.indexOf(i)}))&&(n.push("%TAG ".concat(e," ").concat(i)),r=!0)})),(r||this.directivesEndMarker)&&n.push("---"),this.commentBefore&&(!r&&this.directivesEndMarker||n.unshift(""),n.unshift(this.commentBefore.replace(/^/gm,"#")));var o={anchors:Object.create(null),doc:this,indent:"",indentStep:" ".repeat(t),stringify:sl},s=!1,u=null;if(this.contents){this.contents instanceof Ss&&(this.contents.spaceBefore&&(r||this.directivesEndMarker)&&n.push(""),this.contents.commentBefore&&n.push(this.contents.commentBefore.replace(/^/gm,"#")),o.forceBlockIndent=!!this.comment,u=this.contents.comment);var l=u?null:function(){return s=!0},c=sl(this.contents,o,(function(){return u=null}),l);n.push(Ms(c,"",u))}else void 0!==this.contents&&n.push(sl(this.contents,o));return this.comment&&(s&&!u||""===n[n.length-1]||n.push(""),n.push(this.comment.replace(/^/gm,"#"))),n.join("\n")+"\n"}}]),t}();oo(gl,"defaults",al);var pl=function(t){so(n,gl);var e=vo(n);function n(t){return ro(this,n),e.call(this,Object.assign({},rl,t))}return n}();function vl(t,e){var n=_s(t),r=new pl(e).parse(n[0]);if(n.length>1){r.errors.unshift(new ns(n[1],"Source contains multiple documents; please use YAML.parseAllDocuments()"))}return r}var ml={createNode:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0;void 0===n&&"string"==typeof e&&(n=e,e=!0);var r=Object.assign({},gl.defaults[rl.version],rl),i=new nl(r);return i.createNode(t,e,n)},defaultOptions:rl,Document:pl,parse:function(t,e){var n=vl(t,e);if(n.warnings.forEach((function(t){return Nu(t)})),n.errors.length>0)throw n.errors[0];return n.toJSON()},parseAllDocuments:function(t,e){var n,r,i=[],a=Mo(_s(t));try{for(a.s();!(r=a.n()).done;){var o=r.value,s=new pl(e);s.parse(o,n),i.push(s),n=s}}catch(t){a.e(t)}finally{a.f()}return i},parseCST:_s,parseDocument:vl,scalarOptions:il,stringify:function(t,e){var n=new pl(e);return n.contents=t,String(n)}},yl=s(Object.freeze({__proto__:null,YAML:ml})).YAML,wl=function(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}((function(t,e){Object.defineProperty(e,"__esModule",{value:!0});const r="YYYY-MM-DD",i="gggg-[W]ww",a="YYYY-MM";function o(t){const e=window.app.plugins.getPlugin("periodic-notes");return e&&e.settings?.[t]?.enabled}function s(){try{const{internalPlugins:t,plugins:e}=window.app;if(o("daily")){const{format:t,folder:n,template:i}=e.getPlugin("periodic-notes")?.settings?.daily||{};return{format:t||r,folder:n?.trim()||"",template:i?.trim()||""}}const{folder:n,format:i,template:a}=t.getPluginById("daily-notes")?.instance?.options||{};return{format:i||r,folder:n?.trim()||"",template:a?.trim()||""}}catch(t){console.info("No custom daily note settings found!",t)}}function u(){try{const t=window.app.plugins,e=t.getPlugin("calendar")?.options,n=t.getPlugin("periodic-notes")?.settings?.weekly;if(o("weekly"))return{format:n.format||i,folder:n.folder?.trim()||"",template:n.template?.trim()||""};const r=e||{};return{format:r.weeklyNoteFormat||i,folder:r.weeklyNoteFolder?.trim()||"",template:r.weeklyNoteTemplate?.trim()||""}}catch(t){console.info("No custom weekly note settings found!",t)}}function l(){const t=window.app.plugins;try{const e=o("monthly")&&t.getPlugin("periodic-notes")?.settings?.monthly||{};return{format:e.format||a,folder:e.folder?.trim()||"",template:e.template?.trim()||""}}catch(t){console.info("No custom monthly note settings found!",t)}}function c(...t){let e=[];for(let n=0,r=t.length;n<r;n++)e=e.concat(t[n].split("/"));const n=[];for(let t=0,r=e.length;t<r;t++){const r=e[t];r&&"."!==r&&n.push(r)}return""===e[0]&&n.unshift(""),n.join("/")}async function f(t,e){e.endsWith(".md")||(e+=".md");const r=n.default.normalizePath(c(t,e));return await async function(t){const e=t.replace(/\\/g,"/").split("/");if(e.pop(),e.length){const t=c(...e);window.app.vault.getAbstractFileByPath(t)||await window.app.vault.createFolder(t)}}(r),r}async function h(t){const{metadataCache:e,vault:r}=window.app,i=n.default.normalizePath(t);if("/"===i)return Promise.resolve(["",null]);try{const t=e.getFirstLinkpathDest(i,""),n=await r.cachedRead(t);return[n,window.app.foldManager.load(t)]}catch(t){return console.error(`Failed to read the daily note template '${i}'`,t),new n.default.Notice("Failed to read the daily note template"),["",null]}}function d(t,e="day"){return`${e}-${t.clone().startOf(e).format()}`}function g(t){return t.replace(/\[[^\]]*\]/g,"")}function p(t,e){return v(t.basename,e)}function v(t,e){const n={day:s,week:u,month:l}[e]().format.split("/").pop(),r=window.moment(t,n,!0);if(!r.isValid())return null;if(function(t,e){if("week"===e){const e=g(t);return/w{1,2}/i.test(e)&&(/M{1,4}/.test(e)||/D{1,4}/.test(e))}return!1}(n,e)&&"week"===e){const e=g(n);if(/w{1,2}/i.test(e))return window.moment(t,n.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return r}class m extends Error{}async function y(t){const e=window.app,{vault:r}=e,i=window.moment,{template:a,format:o,folder:u}=s(),[l,c]=await h(a),d=t.format(o),g=await f(u,d);try{const n=await r.create(g,l.replace(/{{\s*date\s*}}/gi,d).replace(/{{\s*time\s*}}/gi,i().format("HH:mm")).replace(/{{\s*title\s*}}/gi,d).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,a,s,u)=>{const l=i(),c=t.clone().set({hour:l.get("hour"),minute:l.get("minute"),second:l.get("second")});return r&&c.add(parseInt(a,10),s),u?c.format(u.substring(1).trim()):c.format(o)})).replace(/{{\s*yesterday\s*}}/gi,t.clone().subtract(1,"day").format(o)).replace(/{{\s*tomorrow\s*}}/gi,t.clone().add(1,"d").format(o)));return e.foldManager.save(n,c),n}catch(t){console.error(`Failed to create file: '${g}'`,t),new n.default.Notice("Unable to create new file.")}}class w extends Error{}function b(t){return function(){const{moment:t}=window;let e=t.localeData()._week.dow;const n=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;e;)n.push(n.shift()),e--;return n}().indexOf(t.toLowerCase())}async function x(t){const{vault:e}=window.app,{template:r,format:i,folder:a}=u(),[o,s]=await h(r),l=t.format(i),c=await f(a,l);try{const n=await e.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,a,o,s)=>{const u=window.moment(),l=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&l.add(parseInt(a,10),o),s?l.format(s.substring(1).trim()):l.format(i)})).replace(/{{\s*title\s*}}/gi,l).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,((e,n,r)=>{const i=b(n);return t.weekday(i).format(r.trim())})));return window.app.foldManager.save(n,s),n}catch(t){console.error(`Failed to create file: '${c}'`,t),new n.default.Notice("Unable to create new file.")}}class k extends Error{}async function _(t){const{vault:e}=window.app,{template:r,format:i,folder:a}=l(),[o,s]=await h(r),u=t.format(i),c=await f(a,u);try{const n=await e.create(c,o.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((e,n,r,a,o,s)=>{const u=window.moment(),l=t.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return r&&l.add(parseInt(a,10),o),s?l.format(s.substring(1).trim()):l.format(i)})).replace(/{{\s*date\s*}}/gi,u).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,u));return window.app.foldManager.save(n,s),n}catch(t){console.error(`Failed to create file: '${c}'`,t),new n.default.Notice("Unable to create new file.")}}function M(){const{app:t}=window;if(t.plugins.getPlugin("calendar"))return!0;const e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.weekly?.enabled}function S(){const{app:t}=window,e=t.plugins.getPlugin("periodic-notes");return e&&e.settings?.monthly?.enabled}e.DEFAULT_DAILY_NOTE_FORMAT=r,e.DEFAULT_MONTHLY_NOTE_FORMAT=a,e.DEFAULT_WEEKLY_NOTE_FORMAT=i,e.appHasDailyNotesPluginLoaded=function(){const{app:t}=window,e=t.internalPlugins.plugins["daily-notes"];if(e&&e.enabled)return!0;const n=t.plugins.getPlugin("periodic-notes");return n&&n.settings?.daily?.enabled},e.appHasMonthlyNotesPluginLoaded=S,e.appHasWeeklyNotesPluginLoaded=M,e.createDailyNote=y,e.createMonthlyNote=_,e.createPeriodicNote=function(t,e){return{day:y,month:_,week:x}[t](e)},e.createWeeklyNote=x,e.getAllDailyNotes=function(){const{vault:t}=window.app,{folder:e}=s(),r=t.getAbstractFileByPath(n.default.normalizePath(e));if(!r)throw new m("Failed to find daily notes folder");const i={};return n.default.Vault.recurseChildren(r,(t=>{if(t instanceof n.default.TFile){const e=p(t,"day");if(e){const n=d(e,"day");i[n]=t}}})),i},e.getAllMonthlyNotes=function(){const t={};if(!S())return t;const{vault:e}=window.app,{folder:r}=l(),i=e.getAbstractFileByPath(n.default.normalizePath(r));if(!i)throw new k("Failed to find monthly notes folder");return n.default.Vault.recurseChildren(i,(e=>{if(e instanceof n.default.TFile){const n=p(e,"month");if(n){const r=d(n,"month");t[r]=e}}})),t},e.getAllWeeklyNotes=function(){const t={};if(!M())return t;const{vault:e}=window.app,{folder:r}=u(),i=e.getAbstractFileByPath(n.default.normalizePath(r));if(!i)throw new w("Failed to find weekly notes folder");return n.default.Vault.recurseChildren(i,(e=>{if(e instanceof n.default.TFile){const n=p(e,"week");if(n){const r=d(n,"week");t[r]=e}}})),t},e.getDailyNote=function(t,e){return e[d(t,"day")]??null},e.getDailyNoteSettings=s,e.getDateFromFile=p,e.getDateFromPath=function(t,e){return v(function(t){let e=t.substring(t.lastIndexOf("/")+1);return-1!=e.lastIndexOf(".")&&(e=e.substring(0,e.lastIndexOf("."))),e}(t),e)},e.getDateUID=d,e.getMonthlyNote=function(t,e){return e[d(t,"month")]??null},e.getMonthlyNoteSettings=l,e.getPeriodicNoteSettings=function(t){return(0,{day:s,week:u,month:l}[t])()},e.getTemplateInfo=h,e.getWeeklyNote=function(t,e){return e[d(t,"week")]??null},e.getWeeklyNoteSettings=u}));function bl(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function xl(t){return"tag"===t||"text"===t||"frontmatter"===t||"wiki"===t}function kl(t,e,n,r,i){let a=[],o="",s=0;for(;n>a.length;)a.push(r);if(void 0===e);else if("object"==typeof e){if(Array.isArray(e)){if(e.length>n)return o="Too many input parameters for "+t,o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<a.length;n++)if(n<e.length){let i=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof i){if(i=i.trim(),""!==i){o="Invalid inputs for "+t;break}a[n]=null!==u?u:r}else{if("boolean"!=typeof i){o="Invalid inputs for "+t;break}a[n]=i,s++}}else{let t=e[e.length-1];a[n]=s>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return o="Too many input parameters for "+t,o;for(let e=0;e<a.length;e++)if(e<i.length){let n=i[e].trim(),u=null;if(e>0&&(u=bl(i[e-1].trim())),""===n)a[e]=null!==u?u:r;else{let r=bl(n);if(null===r){o="Invalid inputs for "+t;break}a[e]=r,s++}}else{let t=bl(i[i.length-1].trim());a[e]=s>0&&null!==t?t:r}}else if(""===e);else{let n=bl(e);if(null!==n){a[0]=n,s++;for(let t=1;t<a.length;t++)a[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){a[0]=e,s++;for(let t=1;t<a.length;t++)a[t]=e}else o="Invalid inputs for "+t;return i||0!==s||(o="No valid input for "+t),""!==o?o:a}function _l(t,e,n,r,i){let a=[],o="",s=0;for(;n>a.length;)a.push(r);if(void 0===e);else if("object"==typeof e){if(Array.isArray(e)){if(e.length>n)return o="Too many input parameters for "+t,o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<a.length;n++)if(n<e.length){let i=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof i){if(i=i.trim(),""!==i){o="Invalid inputs for "+t;break}a[n]=null!==u?u:r}else{if("number"!=typeof i){o="Invalid inputs for "+t;break}a[n]=i,s++}}else{let t=e[e.length-1];a[n]=s>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return o="Too many input parameters for "+t,o;for(let n=0;n<a.length;n++)if(n<i.length){let e=i[n].trim(),u=null;if(n>0&&(u=parseFloat(i[n-1].trim())),""===e)null!==u&&Number.isNumber(u)?a[n]=u:a[n]=r;else{let r=parseFloat(e);if(!Number.isNumber(r)){o="Invalid inputs for "+t;break}a[n]=r,s++}}else{let t=parseFloat(i[e.length-1].trim());s>0&&Number.isNumber(t)?a[n]=t:a[n]=r}}else if(""===e);else{let n=parseFloat(e);if(Number.isNumber(n)){a[0]=n,s++;for(let t=1;t<a.length;t++)a[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){a[0]=e,s++;for(let t=1;t<a.length;t++)a[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return i||0!==s||(o="No valid input for "+t),""!==o?o:a}function Ml(t,e,n,r,i,a){let o=[],s="",u=0;for(;n>o.length;)o.push(r);if(void 0===e);else if("object"==typeof e){if(Array.isArray(e)){if(e.length>n)return s="Too many input parameters for "+t,s;if(0===e.length)return s="Empty array not allowd for "+t,s;for(let n=0;n<o.length;n++)if(n<e.length){let a=e[n],l=null;if(n>0&&(l=e[n-1].trim()),"string"!=typeof a){s="Invalid inputs for "+t;break}if(a=a.trim(),""===a)o[n]=null!==l?l:r;else if(i){if(!i(a)){s="Invalid inputs for "+t;break}o[n]=a,u++}else o[n]=a,u++}else{let t=e[e.length-1].trim();o[n]=u>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return s="Too many input parameters for "+t,s;for(let e=0;e<o.length;e++)if(e<a.length){let n=a[e].trim(),l=null;if(e>0&&(l=a[e-1].trim()),""===n)o[e]=null!==l?l:r;else if(i){if(!i(n)){s="Invalid inputs for "+t;break}o[e]=n,u++}else o[e]=n,u++}else{let t=a[a.length-1].trim();o[e]=u>0?t:r}}else if(""===e);else if(i)if(i(e)){o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}else s="Invalid inputs for "+t;else{o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}}else s="Invalid inputs for "+t;return a||0!==u||(s="No valid input for "+t),""!==s?s:o}function Sl(t,e){"string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor);let n=Ml("yAxisLabel",t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=Ml("yAxisColor",t.yAxisColor,2,"",null,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let i=Ml("yAxisLabelColor",t.yAxisLabelColor,2,"",null,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=i;let a=Ml("yAxisUnit",t.yAxisUnit,2,"",null,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=a;let o=_l("yMin",t.yMin,2,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=o;let s=_l("yMax",t.yMax,2,null,!0);return"string"==typeof s?s:s.length>2?"yMax accepts not more than two values for left and right y-axes":(e.yMax=s,"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),void("string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor)))}const Al={folder:"/",dateFormat:"YYYY-MM-DD"};class Nl extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:e}=this;e.empty(),new t.Setting(e).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(e).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>r(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}var Il;!function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Radar=2]="Radar",t[t.Summary=3]="Summary",t[t.Table=4]="Table",t[t.Heatmap=5]="Heatmap"}(Il||(Il={}));class Cl extends t.Plugin{onload(){return r(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new Nl(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Il.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Il.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Il.Summary)})}))}loadSettings(){return r(this,void 0,void 0,(function*(){this.settings=Object.assign({},Al,yield this.loadData())}))}saveSettings(){return r(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let i of e.children)i instanceof t.TFile?"md"===i.extension&&r.push(i):i instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(i)));return r}getFiles(e,n=!0){let r=[],i=this.app.vault.getAbstractFileByPath(t.normalizePath(e));return i&&i instanceof t.TFolder&&(r=r.concat(this.getFilesInFolder(i))),r}addToDataMap(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let i=new Array;i.push({query:n,value:r}),t.set(e,i)}}postprocessor(e,n,i){return r(this,void 0,void 0,(function*(){const r=document.createElement("div");let i,a=function(e,n){let r;try{r=yl.parse(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!r)return"Error parsing YAML";let i="",a=[];if("object"==typeof r.searchTarget){if(Array.isArray(r.searchTarget))for(let t of r.searchTarget)if("string"==typeof t){if(""===t){i="Empty search target is not allowed.";break}a.push(t)}}else if("string"==typeof r.searchTarget){let t=r.searchTarget.split(",");if(t.length>1)for(let e of t){if(e=e.trim(),""===e){i="Empty search target is not allowed.";break}a.push(e)}else""===r.searchTarget?i="Empty search target is not allowed.":a.push(r.searchTarget)}else i="Invalid search target (searchTarget)";if(""!==i)return i;let o=a.length,s=[],u=Ml("search type",r.searchType,o,"",xl,!1);if("string"==typeof u)return u;s=u;let l=[];for(let t=0;t<a.length;t++){let e=new Aa(l.length,s[t],a[t]);l.push(e)}let c=new Ca(l);wl.getDailyNoteSettings(),"string"==typeof r.folder?""===r.folder?c.folder=n.settings.folder:c.folder=r.folder:c.folder=n.settings.folder;let f=n.app.vault.getAbstractFileByPath(t.normalizePath(c.folder));if(!(f&&f instanceof t.TFolder))return"Folder '"+c.folder+"' doesn't exist";const h=r.dateFormat;if("string"==typeof r.dateFormat?""===r.dateFormat?c.dateFormat=n.settings.dateFormat:c.dateFormat=h:c.dateFormat=n.settings.dateFormat,"string"==typeof r.dateFormatPrefix&&(c.dateFormatPrefix=r.dateFormatPrefix),"string"==typeof r.dateFormatSuffix&&(c.dateFormatSuffix=r.dateFormatSuffix),"string"==typeof r.startDate){let t=r.startDate;c.dateFormatPrefix&&t.startsWith(c.dateFormatPrefix)&&(t=t.slice(c.dateFormatPrefix.length)),c.dateFormatSuffix&&t.endsWith(c.dateFormatSuffix)&&(t=t.slice(0,t.length-c.dateFormatSuffix.length));let e=window.moment(t,c.dateFormat,!0);if(!e.isValid())return"Invalid startDate, the format of startDate may not fit your dateFormat "+c.dateFormat;c.startDate=e}if("string"==typeof r.endDate){let t=r.endDate;c.dateFormatPrefix&&t.startsWith(c.dateFormatPrefix)&&(t=t.slice(c.dateFormatPrefix.length)),c.dateFormatSuffix&&t.endsWith(c.dateFormatSuffix)&&(t=t.slice(0,t.length-c.dateFormatSuffix.length));let e=window.moment(t,c.dateFormat,!0);if(!e.isValid())return"Invalid endDate, the format of endDate may not fit your dateFormat "+c.dateFormat;c.endDate=e}if(null!==c.startDate&&c.startDate.isValid()&&null!==c.endDate&&c.endDate.isValid()&&c.endDate<c.startDate)return"Invalid date range (startDate larger than endDate)";let d=Ml("datasetName",r.datasetName,o,"untitled",null,!0);if("string"==typeof d)return d;let g=0;for(let t=0;t<d.length;t++)"untitled"===d[t]&&(d[t]="untitled"+g.toString(),g++);if(new Set(d).size!==d.length)return"Not enough dataset names or duplicated names";c.datasetName=d;let p=_l("constValue",r.constValue,o,1,!0);if("string"==typeof p)return p;c.constValue=p;let v=kl("ignoreAttachedValue",r.ignoreAttachedValue,o,!1,!0);if("string"==typeof v)return v;c.ignoreAttachedValue=v;let m=kl("ignoreZeroValue",r.ignoreZeroValue,o,!1,!0);if("string"==typeof m)return m;c.ignoreZeroValue=m;let y=kl("accum",r.accum,o,!1,!0);if("string"==typeof y)return y;c.accum=y;let w=_l("penalty",r.penalty,o,null,!0);if("string"==typeof w)return w;if(c.penalty=w,void 0!==r.output&&(c.output=r.output),void 0!==r.line){Sl(r.line,c.line);let t=Ml("lineColor",r.line.lineColor,o,"",null,!0);if("string"==typeof t)return t;c.line.lineColor=t;let e=_l("lineWidth",r.line.lineWidth,o,1.5,!0);if("string"==typeof e)return e;c.line.lineWidth=e;let n=kl("showLine",r.line.showLine,o,!0,!0);if("string"==typeof n)return n;c.line.showLine=n;let i=kl("showPoint",r.line.showPoint,o,!0,!0);if("string"==typeof i)return i;c.line.showPoint=i;let a=Ml("pointColor",r.line.pointColor,o,"#69b3a2",null,!0);if("string"==typeof a)return a;c.line.pointColor=a;let s=Ml("pointBorderColor",r.line.pointBorderColor,o,"#69b3a2",null,!0);if("string"==typeof s)return s;c.line.pointBorderColor=s;let u=_l("pointBorderWidth",r.line.pointBorderWidth,o,0,!0);if("string"==typeof u)return u;c.line.pointBorderWidth=u;let l=_l("pointSize",r.line.pointSize,o,3,!0);if("string"==typeof l)return l;c.line.pointSize=l;let f=kl("fillGap",r.line.fillGap,o,!1,!0);if("string"==typeof f)return f;c.line.fillGap=f;let h=Ml("yAxisLocation",r.line.yAxisLocation,o,"left",null,!0);if("string"==typeof h)return h;c.line.yAxisLocation=h}if(void 0!==r.bar){c.bar=new Da,Sl(r.bar,c.bar);let t=Ml("barColor",r.bar.barColor,o,"",null,!0);if("string"==typeof t)return t;c.bar.barColor=t;let e=Ml("yAxisLocation",r.bar.yAxisLocation,o,"left",null,!0);if("string"==typeof e)return e;c.bar.yAxisLocation=e}return void 0!==r.summary&&(c.summary=new Ea,"string"==typeof r.summary.template&&(c.summary.template=r.summary.template),"string"==typeof r.summary.style&&(c.summary.style=r.summary.style)),c}(e.trim(),this);if("string"==typeof a){return eo(r,a),void n.appendChild(r)}try{i=this.getFiles(a.folder)}catch(t){return eo(r,t.message),void n.appendChild(r)}let o=window.moment(""),s=window.moment(""),u=0,l=new Map;for(let t of i)for(let e of a.queries){let n=t.basename;a.dateFormatPrefix&&n.startsWith(a.dateFormatPrefix)&&(n=n.slice(a.dateFormatPrefix.length)),a.dateFormatSuffix&&n.endsWith(a.dateFormatSuffix)&&(n=n.slice(0,n.length-a.dateFormatSuffix.length));let r=window.moment(n,a.dateFormat,!0);if(!r.isValid())continue;if(null!==a.startDate&&r<a.startDate)continue;if(null!==a.endDate&&r>a.endDate)continue;u++,1==u?(o=r.clone(),s=r.clone()):(r<o&&(o=r.clone()),r>s&&(s=r.clone()));let i=this.app.metadataCache.getFileCache(t);if("tag"===e.getType()&&i){let t=i.frontmatter,n=[];if(t&&t.tags){let i=0,o=!1;Array.isArray(t.tags)?n=n.concat(t.tags):n.push(t.tags);for(let t of n){if(t===e.getTarget())i+=a.constValue[e.getId()],o=!0;else{if(!t.startsWith(e.getTarget()+"/"))continue;i+=a.constValue[e.getId()],o=!0}let n=null;o&&(n=i),this.addToDataMap(l,r.format(a.dateFormat),e,n)}}}if("frontmatter"===e.getType()&&"tags"!==e.getTarget()&&i){let t=i.frontmatter;if(t)if(t[e.getTarget()]){let n=t[e.getTarget()];n=parseFloat(n),Number.isNumber(n)&&this.addToDataMap(l,r.format(a.dateFormat),e,n)}else if(e.getParentTarget()&&t[e.getParentTarget()]){let n=t[e.getParentTarget()];if("string"==typeof n){let t=n.split("/");if(t.length>e.getSubId()&&e.getSubId()>=0){let n=parseFloat(t[e.getSubId()].trim());Number.isNumber(n)&&this.addToDataMap(l,r.format(a.dateFormat),e,n)}}}}if("wiki"===e.getType()&&i){let t=i.links,n=0,o=!1;for(let r of t)r.link===e.getTarget()&&(o=!0,n+=a.constValue[e.getId()]);let s=null;o&&(s=n),this.addToDataMap(l,r.format(a.dateFormat),e,s)}if("tag"===e.getType()){let n=yield this.app.vault.adapter.read(t.path),i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget());let o,s=new RegExp("(^|\\s)#"+i+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm"),u=0,c=!1;for(;o=s.exec(n);)if(a.ignoreAttachedValue[e.getId()]||void 0===o.groups||void 0===o.groups.values)u+=a.constValue[e.getId()],c=!0;else{let t=o.groups.values.split("/");if(1===t.length){let t=parseFloat(o.groups.values.trim());Number.isNaN(t)||a.ignoreZeroValue[e.getId()]&&0===t||(u+=t,c=!0)}else if(t.length>e.getSubId()&&e.getSubId()>=0){let n=parseFloat(t[e.getSubId()].trim());Number.isNumber(n)&&(u+=n,c=!0)}}let f=null;c&&(f=u),this.addToDataMap(l,r.format(a.dateFormat),e,f)}if("text"===e.getType()){let n,i=yield this.app.vault.adapter.read(t.path),o=e.getTarget(),s=new RegExp(o,"gm"),u=0,c=!1;for(;n=s.exec(i);)if(a.ignoreAttachedValue[e.getId()]||void 0===n.groups)u+=a.constValue[e.getId()],c=!0;else if(void 0!==n.groups.value){let t=parseFloat(n.groups.value);Number.isNaN(t)||a.ignoreZeroValue[e.getId()]&&0===t||(u+=t,c=!0)}c&&this.addToDataMap(l,r.format(a.dateFormat),e,u)}}if(!o.isValid()||!s.isValid()){return eo(r,"Invalid date range"),void n.appendChild(r)}if(null===a.startDate&&null===a.endDate)a.startDate=o.clone(),a.endDate=s.clone();else if(null!==a.startDate&&null===a.endDate){if(!(a.startDate<s)){return eo(r,"Invalid date range"),void n.appendChild(r)}a.endDate=s.clone()}else if(null!==a.endDate&&null===a.startDate){if(!(a.endDate>o)){return eo(r,"Invalid date range"),void n.appendChild(r)}a.startDate=o.clone()}else if(a.startDate<o&&a.endDate<o||a.startDate>s&&a.endDate>s){return eo(r,"Invalid date range"),void n.appendChild(r)}let c=new Ia(a.startDate,a.endDate);for(let t of a.queries){let e=c.createDataset(t,a);for(let n=a.startDate.clone();n<=a.endDate;n.add(1,"days"))if(l.has(n.format(a.dateFormat))){let r=l.get(n.format(a.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){r[0];let t=0,i=!1;for(let e=0;e<r.length;e++)null!==r[e].value&&(t+=r[e].value,i=!0);i&&e.setValue(n,t)}}}a.datasets=c;let f=function(t,e){for(let t of e.datasets)null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues();return""===e.output?null!==e.summary?to(t,e):null!==e.bar?Za(t,e):Ka(t,e):"line"===e.output?Ka(t,e):"bar"===e.output?Za(t,e):"summary"===e.output?to(t,e):"Unknown output type"}(r,a);if("string"==typeof f){return eo(r,f),void n.appendChild(r)}n.appendChild(r)}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Il.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Il.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Il.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,i=e.getLine(r);return n.ch=i.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=Cl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
