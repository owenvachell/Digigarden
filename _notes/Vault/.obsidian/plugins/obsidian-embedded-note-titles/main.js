/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const ELEMENT_RE = /[\w-]+/g;
const ID_RE = /#[\w-]+/g;
const CLASS_RE = /\.[\w-]+/g;
const ATTR_RE = /\[[^\]]+\]/g;
const PSEUDO_CLASSES_RE = /\:(?!not)[\w-]+(\(.*\))?/g;
const PSEUDO_ELEMENTS_RE = /\:\:?(after|before|first-letter|first-line|selection)/g;
// convert an array-like object to array
function toArray(list) {
    return [].slice.call(list);
}
// handles extraction of `cssRules` as an `Array` from a stylesheet or something that behaves the same
function getSheetRules(stylesheet) {
    var sheet_media = stylesheet.media && stylesheet.media.mediaText;
    // if this sheet is disabled skip it
    if (stylesheet.disabled)
        return [];
    // if this sheet's media is specified and doesn't match the viewport then skip it
    if (sheet_media &&
        sheet_media.length &&
        !window.matchMedia(sheet_media).matches)
        return [];
    // get the style rules of this sheet
    return toArray(stylesheet.cssRules);
}
function _find(string, re) {
    var matches = string.match(re);
    return matches ? matches.length : 0;
}
// calculates the specificity of a given `selector`
function calculateScore(selector) {
    var score = [0, 0, 0], parts = selector.split(" "), part, match;
    //TODO: clean the ':not' part since the last ELEMENT_RE will pick it up
    while (((part = parts.shift()), typeof part == "string")) {
        // find all pseudo-elements
        match = _find(part, PSEUDO_ELEMENTS_RE);
        score[2] += match;
        // and remove them
        match && (part = part.replace(PSEUDO_ELEMENTS_RE, ""));
        // find all pseudo-classes
        match = _find(part, PSEUDO_CLASSES_RE);
        score[1] += match;
        // and remove them
        match && (part = part.replace(PSEUDO_CLASSES_RE, ""));
        // find all attributes
        match = _find(part, ATTR_RE);
        score[1] += match;
        // and remove them
        match && (part = part.replace(ATTR_RE, ""));
        // find all IDs
        match = _find(part, ID_RE);
        score[0] += match;
        // and remove them
        match && (part = part.replace(ID_RE, ""));
        // find all classes
        match = _find(part, CLASS_RE);
        score[1] += match;
        // and remove them
        match && (part = part.replace(CLASS_RE, ""));
        // find all elements
        score[2] += _find(part, ELEMENT_RE);
    }
    return parseInt(score.join(""), 10);
}
// returns the heights possible specificity score an element can get from a give rule's selectorText
function getSpecificityScore(element, selectorText) {
    var selectors = selectorText.split(","), selector, score, result = 0;
    while ((selector = selectors.shift())) {
        if (element.matches(selector)) {
            score = calculateScore(selector);
            result = score > result ? score : result;
        }
    }
    return result;
}
function sortBySpecificity(element, rules) {
    // comparing function that sorts CSSStyleRules according to specificity of their `selectorText`
    function compareSpecificity(a, b) {
        let aScore = getSpecificityScore(element, a.selectorText);
        let bScore = getSpecificityScore(element, b.selectorText);
        // If the styles come from app.css, they take a lower priority
        if (aScore === bScore) {
            if (a.parentStyleSheet.href)
                aScore -= 1;
            if (b.parentStyleSheet.href)
                bScore -= 1;
        }
        return (aScore -
            bScore);
    }
    return rules.sort(compareSpecificity);
}
function getMatchedCSSRules(element) {
    let styleSheets = toArray(window.document.styleSheets);
    let sheet;
    let rules;
    let rule;
    let result = [];
    // assuming the browser hands us stylesheets in order of appearance
    // we iterate them from the beginning to follow proper cascade order
    while ((sheet = styleSheets.shift())) {
        // get the style rules of this sheet
        rules = getSheetRules(sheet);
        // loop the rules in order of appearance
        while ((rule = rules.shift())) {
            // if this is an @import rule
            if (rule.styleSheet) {
                // insert the imported stylesheet's rules at the beginning of this stylesheet's rules
                rules = getSheetRules(rule.styleSheet).concat(rules);
                // and skip this rule
                continue;
            }
            // if there's no stylesheet attribute BUT there IS a media attribute it's a media rule
            else if (rule.media) {
                // insert the contained rules of this media rule to the beginning of this stylesheet's rules
                rules = getSheetRules(rule).concat(rules);
                // and skip it
                continue;
            }
            // check if this element matches this rule's selector
            if (element.matches(rule.selectorText)) {
                // push the rule to the results set
                result.push(rule);
            }
        }
    }
    // sort according to specificity
    return sortBySpecificity(element, result);
}

// Split CSS margin and padding values like `0 auto`, `10px auto 0`, etc.
function getRightLeft(val) {
    if (/\s/.test(val)) {
        const vals = val.split(/\s+/g);
        if (vals.length === 2 || vals.length === 3) {
            return [vals[1], vals[1]];
        }
        if (vals.length === 4) {
            return [vals[1], vals[3]];
        }
    }
    return [val, val];
}
const keyMap = {
    width: "width",
    maxWidth: "max-width",
    margin: "margin",
    marginLeft: "margin-left",
    marginRight: "margin-right",
    padding: "padding",
    paddingLeft: "padding-left",
    paddingRight: "padding-right",
};
// Get the relevant style values from a reference element
function getRefSizing(el) {
    const rules = getMatchedCSSRules(el);
    const sizing = {};
    rules.forEach((r) => {
        const { width, maxWidth, margin, marginLeft, marginRight, padding, paddingLeft, paddingRight, } = r.style;
        if (width) {
            sizing.width = width;
        }
        if (maxWidth) {
            sizing.maxWidth = maxWidth;
        }
        if (margin) {
            const [mRight, mLeft] = getRightLeft(margin);
            sizing.marginLeft = mLeft;
            sizing.marginLeft = mRight;
        }
        if (marginLeft)
            sizing.marginLeft = marginLeft;
        if (marginRight)
            sizing.marginRight = marginRight;
        if (padding) {
            const [pRight, pLeft] = getRightLeft(padding);
            sizing.paddingLeft = pLeft;
            sizing.paddingLeft = pRight;
        }
        if (paddingLeft)
            sizing.paddingLeft = paddingLeft;
        if (paddingRight)
            sizing.paddingRight = paddingRight;
    });
    return sizing;
}
// Apply reference styles to a heading element
function applyRefStyles(heading, ref) {
    for (const key in ref) {
        const val = ref[key];
        if (val) {
            heading.style.setProperty(keyMap[key], val);
        }
    }
}
class HeadingsManager {
    constructor() {
        this.headings = {};
        this.previewSizerRef = null;
        this.codeMirrorSizerRef = null;
        this.codeMirrorSizerInvalid = true;
    }
    getPreviewSizerStyles() {
        const el = document.getElementsByClassName("markdown-preview-sizer");
        if (el.length) {
            this.previewSizerRef = getRefSizing(el[0]);
        }
    }
    getCodeMirrorSizerStyles() {
        const sizerEl = document.getElementsByClassName("CodeMirror-sizer");
        const lineEl = document.getElementsByClassName("CodeMirror-line");
        if (sizerEl.length && lineEl.length) {
            const sizer = sizerEl[0];
            const { marginLeft, paddingRight, borderRightWidth } = sizer.style;
            // If codemirror hasn't applied styles to the div yet, let's consider it 
            // invalid so we can check it again later
            if (marginLeft !== "0px" && paddingRight !== "0px") {
                this.codeMirrorSizerInvalid = false;
            }
            const inline = {
                marginLeft,
                marginRight: borderRightWidth,
                paddingRight,
            };
            const sizerRef = getRefSizing(sizer);
            const line = lineEl[0];
            const lineRef = getRefSizing(line);
            // Combine inline styles with CSS styles
            this.codeMirrorSizerRef = Object.assign(Object.assign({}, inline), sizerRef);
            if (lineRef.paddingLeft) {
                this.codeMirrorSizerRef.paddingLeft = this.codeMirrorSizerRef
                    .paddingLeft
                    ? `calc(${this.codeMirrorSizerRef.paddingLeft} + ${lineRef.paddingLeft})`
                    : lineRef.paddingLeft;
            }
            if (lineRef.paddingRight) {
                this.codeMirrorSizerRef.paddingRight = this.codeMirrorSizerRef
                    .paddingRight
                    ? `calc(${this.codeMirrorSizerRef.paddingRight} + ${lineRef.paddingRight})`
                    : lineRef.paddingRight;
            }
        }
    }
    // Once the codemirror heading styles have been validated, loop through and update everything
    updateCodeMirrorHeadings() {
        Object.keys(this.headings).forEach((id) => {
            const h1Edit = document.getElementById(`${id}-edit`);
            applyRefStyles(h1Edit, this.codeMirrorSizerRef);
        });
    }
    // Clean up headings once a pane has been closed or the plugin has been disabled
    removeHeading(id) {
        if (!this.headings[id])
            return;
        const h1Edit = document.getElementById(`${id}-edit`);
        const h1Preview = document.getElementById(`${id}-preview`);
        if (h1Edit)
            h1Edit.remove();
        if (h1Preview)
            h1Preview.remove();
        this.headings[id].resizeWatcher.disconnect();
        delete this.headings[id].resizeWatcher;
        delete this.headings[id];
    }
    createHeading(id, leaf) {
        var _a, _b;
        // CodeMirror adds margin and padding only after the editor is visible
        if (this.codeMirrorSizerInvalid &&
            ((_a = leaf.getViewState().state) === null || _a === void 0 ? void 0 : _a.mode) === "source") {
            this.getCodeMirrorSizerStyles();
            if (!this.codeMirrorSizerInvalid) {
                this.updateCodeMirrorHeadings();
            }
        }
        if (this.headings[id])
            return;
        const title = (_b = leaf.view.file) === null || _b === void 0 ? void 0 : _b.basename;
        if (!title)
            return;
        const viewContent = leaf.view.containerEl.getElementsByClassName("CodeMirror-scroll");
        const lines = leaf.view.containerEl.getElementsByClassName("CodeMirror-lines");
        const previewContent = leaf.view.containerEl.getElementsByClassName("markdown-preview-view");
        if (!this.previewSizerRef) {
            this.getPreviewSizerStyles();
        }
        if (!this.codeMirrorSizerRef) {
            this.getCodeMirrorSizerStyles();
        }
        if (viewContent.length && previewContent.length) {
            // Create the codemirror heading
            const editEl = viewContent[0];
            const h1Edit = document.createElement("h1");
            applyRefStyles(h1Edit, this.codeMirrorSizerRef);
            h1Edit.setText(title);
            h1Edit.id = `${id}-edit`;
            editEl.prepend(h1Edit);
            const onResize = obsidian.debounce((entries) => {
                if (lines.length) {
                    const linesEl = lines[0];
                    const height = Math.ceil(entries[0].borderBoxSize[0].blockSize);
                    linesEl.style.paddingTop = `${height}px`;
                    h1Edit.style.marginBottom = `-${height}px`;
                }
            }, 20, true);
            // We need to push the content down when the pane resizes so the heading
            // doesn't cover the content
            const resizeWatcher = new window.ResizeObserver(onResize);
            resizeWatcher.observe(h1Edit);
            // Create the preview heading
            const previewEl = previewContent[0];
            const h1Preview = document.createElement("h1");
            applyRefStyles(h1Preview, this.previewSizerRef);
            h1Preview.setText(title);
            h1Preview.id = `${id}-preview`;
            previewEl.prepend(h1Preview);
            this.headings[id] = { leaf, resizeWatcher };
        }
    }
    // Generate a unique ID for a leaf
    getLeafId(leaf) {
        const viewState = leaf.getViewState();
        if (viewState.type === "markdown") {
            return ("title-" +
                (leaf.id + viewState.state.file).replace(/^[^a-z]+|[^\w:.-]+/gi, ""));
        }
        return null;
    }
    // Iterate through all leafs and generate headings if needed
    createHeadings(app) {
        const seen = {};
        app.workspace.iterateRootLeaves((leaf) => {
            const id = this.getLeafId(leaf);
            if (id) {
                this.createHeading(id, leaf);
                seen[id] = true;
            }
        });
        Object.keys(this.headings).forEach((id) => {
            if (!seen[id]) {
                this.removeHeading(id);
            }
        });
    }
    cleanup() {
        this.previewSizerRef = null;
        this.codeMirrorSizerRef = null;
        Object.keys(this.headings).forEach((id) => {
            this.removeHeading(id);
        });
    }
}

class EmbeddedNoteTitlesPlugin extends obsidian.Plugin {
    onload() {
        document.body.classList.add("embedded-note-titles");
        this.headingsManager = new HeadingsManager();
        this.registerEvent(this.app.workspace.on("layout-change", () => {
            setTimeout(() => {
                this.headingsManager.createHeadings(this.app);
            }, 0);
        }));
        // Listen for CSS changes so we can recalculate heading styles
        this.registerEvent(this.app.workspace.on("css-change", () => {
            this.headingsManager.cleanup();
            setTimeout(() => {
                this.headingsManager.createHeadings(this.app);
            }, 0);
        }));
        this.app.workspace.layoutReady
            ? this.app.workspace.trigger("layout-change")
            : this.app.workspace.onLayoutReady(() => {
                // Trigger layout-change to ensure headings are created when the app loads
                this.app.workspace.trigger("layout-change");
            });
    }
    onunload() {
        document.body.classList.remove("embedded-note-titles");
        this.headingsManager.cleanup();
    }
}

module.exports = EmbeddedNoteTitlesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
